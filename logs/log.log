2019-07-02 07:00:38  [main:0] - [INFO]  using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2019-07-02 07:00:38  [main:20] - [INFO]   [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:38  [main:21] - [INFO]   [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:39  [main:110] - [INFO]   [DUBBO] The BeanDefinition[Root bean: class [com.alibaba.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean has been registered with name : providers:dubbo:com.self.study.api.DemoService, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:39  [main:111] - [INFO]   [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'provider': Generic bean: class [com.self.study.impl.services.Provider]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [C:\works\Runner_VIV\VIV-BAAS\all\dubbo-test\target\classes\com\self\study\impl\services\Provider.class]] } were scanned under package[com.self.study.impl.services], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:39  [main:640] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:39  [main:650] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, try to find an extension (bean) of type java.lang.String, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:39  [main:650] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, type:java.lang.String found, stop get bean., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:39  [main:885] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0, boolean arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:40  [main:1039] - [INFO]   [DUBBO] The service ready on spring started. service: com.self.study.api.DemoService, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:40  [main:1308] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.rpc.Invocation arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
if (arg1 == null) throw new IllegalArgumentException("invocation == null");
String methodName = arg1.getMethodName();
String extName = url.getMethodParameter(methodName, "cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:40  [main:1340] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:40  [main:1367] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:40  [main:1397] - [INFO]   [DUBBO] Export dubbo service com.self.study.api.DemoService to local registry, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:40  [main:1397] - [INFO]   [DUBBO] Export dubbo service com.self.study.api.DemoService to url dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&bind.ip=172.27.35.1&bind.port=20880&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:40  [main:1399] - [INFO]   [DUBBO] Register dubbo service com.self.study.api.DemoService url dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&bind.ip=172.27.35.1&bind.port=20880&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128 to registry registry://127.0.0.1:2182/com.alibaba.dubbo.registry.RegistryService?application=annotation-provider&dubbo=2.0.2&pid=560&registry=zookeeper&timestamp=1562022040034, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:40  [main:1414] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:40  [main:1436] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:41  [main:2812] - [INFO]   [DUBBO] qos-server bind localhost:22222, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:41  [main:2840] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:41  [main:2870] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:41  [main:2899] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:41  [main:2973] - [INFO]   [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /172.27.35.1:20880, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:41  [main:2982] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:41  [main:3018] - [INFO]   [DUBBO] Load registry store file C:\Users\14467\.dubbo\dubbo-registry-annotation-provider-127.0.0.1:2182.cache, data: {com.self.study.api.DemoService=empty://169.254.72.48:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=6908&side=provider&timestamp=1561979616890}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:51  [main:12552] - [INFO]   [DUBBO] Register: dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:51  [main:12994] - [INFO]   [DUBBO] Subscribe: provider://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:51  [main:13013] - [INFO]   [DUBBO] Notify urls for subscribe url provider://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128, urls: [empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:51  [main:13015] - [DEBUG]   [DUBBO] original override urls: [empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:51  [main:13016] - [DEBUG]   [DUBBO] subscribe url: provider://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128, override urls: [empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:52  [main:13025] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:52  [main:13040] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:55  [main:0] - [INFO]  using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2019-07-02 07:00:55  [main:36] - [INFO]   [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:55  [main:36] - [INFO]   [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:55  [main:43] - [WARN]   [DUBBO] No Spring Bean annotating Dubbo's @Service was found under package[com.self.study.impl.consumer], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:56  [main:420] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:56  [main:429] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, try to find an extension (bean) of type java.lang.String, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:56  [main:430] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, type:java.lang.String found, stop get bean., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:56  [main:658] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:56  [main:692] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0, boolean arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:56  [main:972] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:58  [main:2871] - [ERROR]   [DUBBO] qos-server can not bind localhost:22222, dubbo version: 2.6.6, current host: 172.27.35.1
java.net.BindException: Address already in use: bind
	at sun.nio.ch.Net.bind0(Native Method)
	at sun.nio.ch.Net.bind(Net.java:433)
	at sun.nio.ch.Net.bind(Net.java:425)
	at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:223)
	at io.netty.channel.socket.nio.NioServerSocketChannel.doBind(NioServerSocketChannel.java:130)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.bind(AbstractChannel.java:562)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.bind(DefaultChannelPipeline.java:1358)
	at io.netty.channel.AbstractChannelHandlerContext.invokeBind(AbstractChannelHandlerContext.java:501)
	at io.netty.channel.AbstractChannelHandlerContext.bind(AbstractChannelHandlerContext.java:486)
	at io.netty.channel.DefaultChannelPipeline.bind(DefaultChannelPipeline.java:1019)
	at io.netty.channel.AbstractChannel.bind(AbstractChannel.java:258)
	at io.netty.bootstrap.AbstractBootstrap$2.run(AbstractBootstrap.java:366)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:474)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:909)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2019-07-02 07:00:58  [main:2921] - [WARN]   [DUBBO] Fail to start qos server: , dubbo version: 2.6.6, current host: 172.27.35.1
java.net.BindException: Address already in use: bind
	at sun.nio.ch.Net.bind0(Native Method)
	at sun.nio.ch.Net.bind(Net.java:433)
	at sun.nio.ch.Net.bind(Net.java:425)
	at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:223)
	at io.netty.channel.socket.nio.NioServerSocketChannel.doBind(NioServerSocketChannel.java:130)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.bind(AbstractChannel.java:562)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.bind(DefaultChannelPipeline.java:1358)
	at io.netty.channel.AbstractChannelHandlerContext.invokeBind(AbstractChannelHandlerContext.java:501)
	at io.netty.channel.AbstractChannelHandlerContext.bind(AbstractChannelHandlerContext.java:486)
	at io.netty.channel.DefaultChannelPipeline.bind(DefaultChannelPipeline.java:1019)
	at io.netty.channel.AbstractChannel.bind(AbstractChannel.java:258)
	at io.netty.bootstrap.AbstractBootstrap$2.run(AbstractBootstrap.java:366)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:474)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:909)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2019-07-02 07:00:58  [main:2933] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:00:58  [main:2967] - [INFO]   [DUBBO] Load registry store file C:\Users\14467\.dubbo\dubbo-registry-annotation-consumer-127.0.0.1:2182.cache, data: {com.self.study.api.DemoService=empty://169.254.72.48/com.self.study.api.DemoService?application=annotation-consumer&category=configurators&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=14936&side=consumer&timestamp=1561980439939 empty://169.254.72.48/com.self.study.api.DemoService?application=annotation-consumer&category=routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=14936&side=consumer&timestamp=1561980439939 dubbo://169.254.72.48:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=6908&side=provider&timestamp=1561979616890}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:08  [main:12215] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:08  [main:12236] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:08  [main:12257] - [INFO]   [DUBBO] Register: consumer://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=consumers&check=false&default.check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=3340&side=consumer&timestamp=1562022056789, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:08  [main:12612] - [INFO]   [DUBBO] Subscribe: consumer://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=3340&side=consumer&timestamp=1562022056789, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:08  [main:12636] - [INFO]   [DUBBO] Notify urls for subscribe url consumer://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=3340&side=consumer&timestamp=1562022056789, urls: [dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128, empty://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=configurators&default.check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=3340&side=consumer&timestamp=1562022056789, empty://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=routers&default.check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=3340&side=consumer&timestamp=1562022056789], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:08  [main:12719] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:08  [main:12757] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:08  [main:12777] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:08  [main:12861] - [INFO]   [DUBBO] Successed connect to server /172.27.35.1:20880 from NettyClient 172.27.35.1 using dubbo version 2.6.6, channel is NettyChannel [channel=[id: 0xaeb600ad, L:/172.27.35.1:52391 - R:/172.27.35.1:20880]], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:08  [main:12861] - [INFO]   [DUBBO] Start NettyClient DESKTOP-T5RQKO2/172.27.35.1 connect to the server /172.27.35.1:20880, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:08  [main:12943] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.rpc.Invocation arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
if (arg1 == null) throw new IllegalArgumentException("invocation == null");
String methodName = arg1.getMethodName();
String extName = url.getMethodParameter(methodName, "cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:08  [main:12957] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:08  [main:12972] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:08  [main:12992] - [INFO]   [DUBBO] Refer dubbo service com.self.study.api.DemoService from url zookeeper://127.0.0.1:2182/com.alibaba.dubbo.registry.RegistryService?anyhost=true&application=annotation-consumer&bean.name=providers:dubbo:com.self.study.api.DemoService&check=false&default.check=false&default.timeout=3000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=3340&register.ip=172.27.35.1&remote.timestamp=1562022040128&side=consumer&timestamp=1562022056789, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:09  [DubboServerHandler-172.27.35.1:20880-thread-2:30247] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:09  [DubboClientHandler-172.27.35.1:20880-thread-1:13345] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:09  [DubboServerHandler-172.27.35.1:20880-thread-3:30293] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:09  [DubboClientHandler-172.27.35.1:20880-thread-1:13352] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:09  [DubboServerHandler-172.27.35.1:20880-thread-4:30300] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:09  [DubboClientHandler-172.27.35.1:20880-thread-1:13358] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:09  [DubboServerHandler-172.27.35.1:20880-thread-5:30304] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:09  [DubboClientHandler-172.27.35.1:20880-thread-1:13362] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:09  [DubboShutdownHook:13364] - [INFO]   [DUBBO] Run shutdown hook now., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:09  [DubboShutdownHook:13366] - [INFO]   [DUBBO] Close all registries [zookeeper://127.0.0.1:2182/com.alibaba.dubbo.registry.RegistryService?application=annotation-consumer&check=false&dubbo=2.0.2&interface=com.alibaba.dubbo.registry.RegistryService&pid=3340&timestamp=1562022056873], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:09  [DubboShutdownHook:13367] - [INFO]   [DUBBO] Destroy registry:zookeeper://127.0.0.1:2182/com.alibaba.dubbo.registry.RegistryService?application=annotation-consumer&check=false&dubbo=2.0.2&interface=com.alibaba.dubbo.registry.RegistryService&pid=3340&timestamp=1562022056873, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:09  [DubboShutdownHook:13367] - [INFO]   [DUBBO] Unregister: consumer://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=consumers&check=false&default.check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=3340&side=consumer&timestamp=1562022056789, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:09  [DubboShutdownHook:13376] - [INFO]   [DUBBO] Destroy unregister url consumer://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=consumers&check=false&default.check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=3340&side=consumer&timestamp=1562022056789, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:09  [DubboShutdownHook:13377] - [INFO]   [DUBBO] Unsubscribe: consumer://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=3340&side=consumer&timestamp=1562022056789, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:09  [DubboShutdownHook:13378] - [INFO]   [DUBBO] Destroy unsubscribe url consumer://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=3340&side=consumer&timestamp=1562022056789, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:09  [DubboShutdownHook:13404] - [INFO]   [DUBBO] Close dubbo connect: /172.27.35.1:52391-->/172.27.35.1:20880, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:09  [DubboShutdownHook:13406] - [INFO]   [DUBBO] Close netty channel [id: 0xaeb600ad, L:/172.27.35.1:52391 - R:/172.27.35.1:20880], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:09  [DubboShutdownHook:13410] - [INFO]   [DUBBO] Close dubbo connect: 172.27.35.1:0-->172.27.35.1:20880, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:09  [DubboShutdownHook:13410] - [INFO]   [DUBBO] Destroy reference: dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-consumer&bean.name=providers:dubbo:com.self.study.api.DemoService&check=false&default.check=false&default.timeout=3000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=3340&register.ip=172.27.35.1&remote.timestamp=1562022040128&side=consumer&timestamp=1562022056789, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:09  [DubboShutdownHook:13411] - [INFO]   [DUBBO] qos-server stopped., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:09  [NettyServerWorker-5-1:30370] - [WARN]   [DUBBO] All clients has discontected from /172.27.35.1:20880. You can graceful shutdown now., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:09  [DubboServerHandler-172.27.35.1:20880-thread-6:30372] - [INFO]   [DUBBO] disconnected from /172.27.35.1:52391,url:dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&bind.ip=172.27.35.1&bind.port=20880&channel.readonly.sent=true&codec=dubbo&default.timeout=1000&dubbo=2.0.2&generic=false&heartbeat=60000&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:39  [main:0] - [INFO]  using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2019-07-02 07:01:39  [main:34] - [INFO]   [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:39  [main:35] - [INFO]   [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:39  [main:41] - [WARN]   [DUBBO] No Spring Bean annotating Dubbo's @Service was found under package[com.self.study.impl.consumer], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:39  [main:398] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:39  [main:408] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, try to find an extension (bean) of type java.lang.String, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:39  [main:408] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, type:java.lang.String found, stop get bean., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:39  [main:625] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:39  [main:660] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0, boolean arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:40  [main:874] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:42  [main:3059] - [ERROR]   [DUBBO] qos-server can not bind localhost:22222, dubbo version: 2.6.6, current host: 172.27.35.1
java.net.BindException: Address already in use: bind
	at sun.nio.ch.Net.bind0(Native Method)
	at sun.nio.ch.Net.bind(Net.java:433)
	at sun.nio.ch.Net.bind(Net.java:425)
	at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:223)
	at io.netty.channel.socket.nio.NioServerSocketChannel.doBind(NioServerSocketChannel.java:130)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.bind(AbstractChannel.java:562)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.bind(DefaultChannelPipeline.java:1358)
	at io.netty.channel.AbstractChannelHandlerContext.invokeBind(AbstractChannelHandlerContext.java:501)
	at io.netty.channel.AbstractChannelHandlerContext.bind(AbstractChannelHandlerContext.java:486)
	at io.netty.channel.DefaultChannelPipeline.bind(DefaultChannelPipeline.java:1019)
	at io.netty.channel.AbstractChannel.bind(AbstractChannel.java:258)
	at io.netty.bootstrap.AbstractBootstrap$2.run(AbstractBootstrap.java:366)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:474)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:909)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2019-07-02 07:01:42  [main:3064] - [WARN]   [DUBBO] Fail to start qos server: , dubbo version: 2.6.6, current host: 172.27.35.1
java.net.BindException: Address already in use: bind
	at sun.nio.ch.Net.bind0(Native Method)
	at sun.nio.ch.Net.bind(Net.java:433)
	at sun.nio.ch.Net.bind(Net.java:425)
	at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:223)
	at io.netty.channel.socket.nio.NioServerSocketChannel.doBind(NioServerSocketChannel.java:130)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.bind(AbstractChannel.java:562)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.bind(DefaultChannelPipeline.java:1358)
	at io.netty.channel.AbstractChannelHandlerContext.invokeBind(AbstractChannelHandlerContext.java:501)
	at io.netty.channel.AbstractChannelHandlerContext.bind(AbstractChannelHandlerContext.java:486)
	at io.netty.channel.DefaultChannelPipeline.bind(DefaultChannelPipeline.java:1019)
	at io.netty.channel.AbstractChannel.bind(AbstractChannel.java:258)
	at io.netty.bootstrap.AbstractBootstrap$2.run(AbstractBootstrap.java:366)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:474)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:909)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2019-07-02 07:01:42  [main:3072] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:42  [main:3094] - [INFO]   [DUBBO] Load registry store file C:\Users\14467\.dubbo\dubbo-registry-annotation-consumer-127.0.0.1:2182.cache, data: {com.self.study.api.DemoService=empty://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=configurators&default.check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=3340&side=consumer&timestamp=1562022056789 empty://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=routers&default.check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=3340&side=consumer&timestamp=1562022056789 dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:51  [main:12346] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:51  [main:12364] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:51  [main:12382] - [INFO]   [DUBBO] Register: consumer://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=consumers&check=false&default.check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=444&side=consumer&timestamp=1562022100003, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:51  [main:12783] - [INFO]   [DUBBO] Subscribe: consumer://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=444&side=consumer&timestamp=1562022100003, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [main:12813] - [INFO]   [DUBBO] Notify urls for subscribe url consumer://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=444&side=consumer&timestamp=1562022100003, urls: [dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128, empty://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=configurators&default.check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=444&side=consumer&timestamp=1562022100003, empty://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=routers&default.check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=444&side=consumer&timestamp=1562022100003], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [main:12849] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [main:12902] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [main:12932] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [main:13044] - [INFO]   [DUBBO] Successed connect to server /172.27.35.1:20880 from NettyClient 172.27.35.1 using dubbo version 2.6.6, channel is NettyChannel [channel=[id: 0x71c7ad80, L:/172.27.35.1:52528 - R:/172.27.35.1:20880]], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [main:13044] - [INFO]   [DUBBO] Start NettyClient DESKTOP-T5RQKO2/172.27.35.1 connect to the server /172.27.35.1:20880, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [main:13160] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.rpc.Invocation arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
if (arg1 == null) throw new IllegalArgumentException("invocation == null");
String methodName = arg1.getMethodName();
String extName = url.getMethodParameter(methodName, "cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [main:13180] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [main:13199] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [main:13223] - [INFO]   [DUBBO] Refer dubbo service com.self.study.api.DemoService from url zookeeper://127.0.0.1:2182/com.alibaba.dubbo.registry.RegistryService?anyhost=true&application=annotation-consumer&bean.name=providers:dubbo:com.self.study.api.DemoService&check=false&default.check=false&default.timeout=3000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=444&register.ip=172.27.35.1&remote.timestamp=1562022040128&side=consumer&timestamp=1562022100003, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [DubboServerHandler-172.27.35.1:20880-thread-8:73641] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [DubboClientHandler-172.27.35.1:20880-thread-1:13427] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [DubboServerHandler-172.27.35.1:20880-thread-9:73661] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [DubboClientHandler-172.27.35.1:20880-thread-1:13434] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [DubboServerHandler-172.27.35.1:20880-thread-10:73668] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [DubboClientHandler-172.27.35.1:20880-thread-1:13439] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [DubboServerHandler-172.27.35.1:20880-thread-11:73672] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [DubboClientHandler-172.27.35.1:20880-thread-1:13444] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [DubboShutdownHook:13446] - [INFO]   [DUBBO] Run shutdown hook now., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [DubboShutdownHook:13449] - [INFO]   [DUBBO] Close all registries [zookeeper://127.0.0.1:2182/com.alibaba.dubbo.registry.RegistryService?application=annotation-consumer&check=false&dubbo=2.0.2&interface=com.alibaba.dubbo.registry.RegistryService&pid=444&timestamp=1562022100066], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [DubboShutdownHook:13449] - [INFO]   [DUBBO] Destroy registry:zookeeper://127.0.0.1:2182/com.alibaba.dubbo.registry.RegistryService?application=annotation-consumer&check=false&dubbo=2.0.2&interface=com.alibaba.dubbo.registry.RegistryService&pid=444&timestamp=1562022100066, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [DubboShutdownHook:13450] - [INFO]   [DUBBO] Unregister: consumer://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=consumers&check=false&default.check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=444&side=consumer&timestamp=1562022100003, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [DubboShutdownHook:13460] - [INFO]   [DUBBO] Destroy unregister url consumer://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=consumers&check=false&default.check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=444&side=consumer&timestamp=1562022100003, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [DubboShutdownHook:13460] - [INFO]   [DUBBO] Unsubscribe: consumer://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=444&side=consumer&timestamp=1562022100003, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [DubboShutdownHook:13461] - [INFO]   [DUBBO] Destroy unsubscribe url consumer://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=444&side=consumer&timestamp=1562022100003, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [DubboShutdownHook:13474] - [INFO]   [DUBBO] Close dubbo connect: /172.27.35.1:52528-->/172.27.35.1:20880, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [DubboShutdownHook:13477] - [INFO]   [DUBBO] Close netty channel [id: 0x71c7ad80, L:/172.27.35.1:52528 - R:/172.27.35.1:20880], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [NettyServerWorker-5-2:73709] - [WARN]   [DUBBO] All clients has discontected from /172.27.35.1:20880. You can graceful shutdown now., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [DubboShutdownHook:13480] - [INFO]   [DUBBO] Close dubbo connect: 172.27.35.1:0-->172.27.35.1:20880, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [DubboServerHandler-172.27.35.1:20880-thread-12:73711] - [INFO]   [DUBBO] disconnected from /172.27.35.1:52528,url:dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&bind.ip=172.27.35.1&bind.port=20880&channel.readonly.sent=true&codec=dubbo&default.timeout=1000&dubbo=2.0.2&generic=false&heartbeat=60000&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [DubboShutdownHook:13481] - [INFO]   [DUBBO] Destroy reference: dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-consumer&bean.name=providers:dubbo:com.self.study.api.DemoService&check=false&default.check=false&default.timeout=3000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=444&register.ip=172.27.35.1&remote.timestamp=1562022040128&side=consumer&timestamp=1562022100003, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:01:52  [DubboShutdownHook:13482] - [INFO]   [DUBBO] qos-server stopped., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:31  [main:0] - [INFO]  using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2019-07-02 07:02:31  [main:34] - [INFO]   [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:31  [main:34] - [INFO]   [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:31  [main:41] - [WARN]   [DUBBO] No Spring Bean annotating Dubbo's @Service was found under package[com.self.study.impl.consumer], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:32  [main:420] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:32  [main:429] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, try to find an extension (bean) of type java.lang.String, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:32  [main:430] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, type:java.lang.String found, stop get bean., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:32  [main:642] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:32  [main:668] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0, boolean arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:32  [main:895] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:34  [main:2886] - [ERROR]   [DUBBO] qos-server can not bind localhost:22222, dubbo version: 2.6.6, current host: 172.27.35.1
java.net.BindException: Address already in use: bind
	at sun.nio.ch.Net.bind0(Native Method)
	at sun.nio.ch.Net.bind(Net.java:433)
	at sun.nio.ch.Net.bind(Net.java:425)
	at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:223)
	at io.netty.channel.socket.nio.NioServerSocketChannel.doBind(NioServerSocketChannel.java:130)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.bind(AbstractChannel.java:562)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.bind(DefaultChannelPipeline.java:1358)
	at io.netty.channel.AbstractChannelHandlerContext.invokeBind(AbstractChannelHandlerContext.java:501)
	at io.netty.channel.AbstractChannelHandlerContext.bind(AbstractChannelHandlerContext.java:486)
	at io.netty.channel.DefaultChannelPipeline.bind(DefaultChannelPipeline.java:1019)
	at io.netty.channel.AbstractChannel.bind(AbstractChannel.java:258)
	at io.netty.bootstrap.AbstractBootstrap$2.run(AbstractBootstrap.java:366)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:474)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:909)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2019-07-02 07:02:34  [main:2892] - [WARN]   [DUBBO] Fail to start qos server: , dubbo version: 2.6.6, current host: 172.27.35.1
java.net.BindException: Address already in use: bind
	at sun.nio.ch.Net.bind0(Native Method)
	at sun.nio.ch.Net.bind(Net.java:433)
	at sun.nio.ch.Net.bind(Net.java:425)
	at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:223)
	at io.netty.channel.socket.nio.NioServerSocketChannel.doBind(NioServerSocketChannel.java:130)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.bind(AbstractChannel.java:562)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.bind(DefaultChannelPipeline.java:1358)
	at io.netty.channel.AbstractChannelHandlerContext.invokeBind(AbstractChannelHandlerContext.java:501)
	at io.netty.channel.AbstractChannelHandlerContext.bind(AbstractChannelHandlerContext.java:486)
	at io.netty.channel.DefaultChannelPipeline.bind(DefaultChannelPipeline.java:1019)
	at io.netty.channel.AbstractChannel.bind(AbstractChannel.java:258)
	at io.netty.bootstrap.AbstractBootstrap$2.run(AbstractBootstrap.java:366)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:474)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:909)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2019-07-02 07:02:34  [main:2897] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:34  [main:2916] - [INFO]   [DUBBO] Load registry store file C:\Users\14467\.dubbo\dubbo-registry-annotation-consumer-127.0.0.1:2182.cache, data: {com.self.study.api.DemoService=empty://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=configurators&default.check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=444&side=consumer&timestamp=1562022100003 empty://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=routers&default.check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=444&side=consumer&timestamp=1562022100003 dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:43  [main:12140] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:43  [main:12154] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:43  [main:12167] - [INFO]   [DUBBO] Register: consumer://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=consumers&check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=11812&side=consumer&timestamp=1562022152516, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [main:12550] - [INFO]   [DUBBO] Subscribe: consumer://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=11812&side=consumer&timestamp=1562022152516, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [main:12585] - [INFO]   [DUBBO] Notify urls for subscribe url consumer://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=11812&side=consumer&timestamp=1562022152516, urls: [dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128, empty://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=configurators&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=11812&side=consumer&timestamp=1562022152516, empty://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=11812&side=consumer&timestamp=1562022152516], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [main:12622] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [main:12660] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [main:12681] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [main:12765] - [INFO]   [DUBBO] Successed connect to server /172.27.35.1:20880 from NettyClient 172.27.35.1 using dubbo version 2.6.6, channel is NettyChannel [channel=[id: 0x9ed1506c, L:/172.27.35.1:52687 - R:/172.27.35.1:20880]], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [main:12765] - [INFO]   [DUBBO] Start NettyClient DESKTOP-T5RQKO2/172.27.35.1 connect to the server /172.27.35.1:20880, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [main:12850] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.rpc.Invocation arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
if (arg1 == null) throw new IllegalArgumentException("invocation == null");
String methodName = arg1.getMethodName();
String extName = url.getMethodParameter(methodName, "cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [main:12863] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [main:12879] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [main:12900] - [INFO]   [DUBBO] Refer dubbo service com.self.study.api.DemoService from url zookeeper://127.0.0.1:2182/com.alibaba.dubbo.registry.RegistryService?anyhost=true&application=annotation-consumer&bean.name=providers:dubbo:com.self.study.api.DemoService&check=false&default.timeout=3000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=11812&register.ip=172.27.35.1&remote.timestamp=1562022040128&side=consumer&timestamp=1562022152516, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [DubboServerHandler-172.27.35.1:20880-thread-14:125795] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [DubboClientHandler-172.27.35.1:20880-thread-1:13085] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [DubboServerHandler-172.27.35.1:20880-thread-15:125816] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [DubboClientHandler-172.27.35.1:20880-thread-1:13090] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [DubboServerHandler-172.27.35.1:20880-thread-16:125821] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [DubboClientHandler-172.27.35.1:20880-thread-1:13094] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [DubboServerHandler-172.27.35.1:20880-thread-17:125824] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [DubboClientHandler-172.27.35.1:20880-thread-1:13098] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [DubboShutdownHook:13100] - [INFO]   [DUBBO] Run shutdown hook now., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [DubboShutdownHook:13103] - [INFO]   [DUBBO] Close all registries [zookeeper://127.0.0.1:2182/com.alibaba.dubbo.registry.RegistryService?application=annotation-consumer&dubbo=2.0.2&interface=com.alibaba.dubbo.registry.RegistryService&pid=11812&timestamp=1562022152583], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [DubboShutdownHook:13103] - [INFO]   [DUBBO] Destroy registry:zookeeper://127.0.0.1:2182/com.alibaba.dubbo.registry.RegistryService?application=annotation-consumer&dubbo=2.0.2&interface=com.alibaba.dubbo.registry.RegistryService&pid=11812&timestamp=1562022152583, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [DubboShutdownHook:13104] - [INFO]   [DUBBO] Unregister: consumer://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=consumers&check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=11812&side=consumer&timestamp=1562022152516, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [DubboShutdownHook:13112] - [INFO]   [DUBBO] Destroy unregister url consumer://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=consumers&check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=11812&side=consumer&timestamp=1562022152516, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [DubboShutdownHook:13113] - [INFO]   [DUBBO] Unsubscribe: consumer://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=11812&side=consumer&timestamp=1562022152516, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [DubboShutdownHook:13113] - [INFO]   [DUBBO] Destroy unsubscribe url consumer://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=11812&side=consumer&timestamp=1562022152516, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [DubboShutdownHook:13220] - [INFO]   [DUBBO] Close dubbo connect: /172.27.35.1:52687-->/172.27.35.1:20880, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [DubboShutdownHook:13223] - [INFO]   [DUBBO] Close netty channel [id: 0x9ed1506c, L:/172.27.35.1:52687 - R:/172.27.35.1:20880], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [NettyServerWorker-5-3:125954] - [WARN]   [DUBBO] All clients has discontected from /172.27.35.1:20880. You can graceful shutdown now., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [DubboShutdownHook:13228] - [INFO]   [DUBBO] Close dubbo connect: 172.27.35.1:0-->172.27.35.1:20880, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [DubboServerHandler-172.27.35.1:20880-thread-18:125956] - [INFO]   [DUBBO] disconnected from /172.27.35.1:52687,url:dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&bind.ip=172.27.35.1&bind.port=20880&channel.readonly.sent=true&codec=dubbo&default.timeout=1000&dubbo=2.0.2&generic=false&heartbeat=60000&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [DubboShutdownHook:13228] - [INFO]   [DUBBO] Destroy reference: dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-consumer&bean.name=providers:dubbo:com.self.study.api.DemoService&check=false&default.timeout=3000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=11812&register.ip=172.27.35.1&remote.timestamp=1562022040128&side=consumer&timestamp=1562022152516, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:02:44  [DubboShutdownHook:13229] - [INFO]   [DUBBO] qos-server stopped., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:06  [main-EventThread:147346] - [INFO]   [DUBBO] Notify urls for subscribe url provider://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128, urls: [empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:06  [main-EventThread:147348] - [DEBUG]   [DUBBO] original override urls: [empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:06  [main-EventThread:147348] - [DEBUG]   [DUBBO] subscribe url: provider://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128, override urls: [empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:07  [main-EventThread:148949] - [INFO]   [DUBBO] Notify urls for subscribe url provider://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128, urls: [empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:07  [main-EventThread:148950] - [DEBUG]   [DUBBO] original override urls: [empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:07  [main-EventThread:148950] - [DEBUG]   [DUBBO] subscribe url: provider://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128, override urls: [empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:07  [Curator-ConnectionStateManager-0:148952] - [INFO]   [DUBBO] Recover register url [dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:07  [Curator-ConnectionStateManager-0:148954] - [INFO]   [DUBBO] Recover subscribe url [provider://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:12  [DubboRegistryFailedRetryTimer-thread-1:153050] - [INFO]   [DUBBO] Retry register [dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:12  [DubboRegistryFailedRetryTimer-thread-1:153228] - [INFO]   [DUBBO] Retry subscribe {provider://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128=[com.alibaba.dubbo.registry.integration.RegistryProtocol$OverrideListener@21baa903]}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:12  [DubboRegistryFailedRetryTimer-thread-1:153237] - [INFO]   [DUBBO] Notify urls for subscribe url provider://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128, urls: [empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:12  [DubboRegistryFailedRetryTimer-thread-1:153239] - [DEBUG]   [DUBBO] original override urls: [empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:12  [DubboRegistryFailedRetryTimer-thread-1:153239] - [DEBUG]   [DUBBO] subscribe url: provider://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128, override urls: [empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:24  [main:0] - [INFO]  using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2019-07-02 07:03:24  [main:36] - [INFO]   [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:24  [main:37] - [INFO]   [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:24  [main:43] - [WARN]   [DUBBO] No Spring Bean annotating Dubbo's @Service was found under package[com.self.study.impl.consumer], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:25  [main:487] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:25  [main:500] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, try to find an extension (bean) of type java.lang.String, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:25  [main:501] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, type:java.lang.String found, stop get bean., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:25  [main:728] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:25  [main:763] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0, boolean arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:25  [main:1036] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:27  [main:2981] - [ERROR]   [DUBBO] qos-server can not bind localhost:22222, dubbo version: 2.6.6, current host: 172.27.35.1
java.net.BindException: Address already in use: bind
	at sun.nio.ch.Net.bind0(Native Method)
	at sun.nio.ch.Net.bind(Net.java:433)
	at sun.nio.ch.Net.bind(Net.java:425)
	at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:223)
	at io.netty.channel.socket.nio.NioServerSocketChannel.doBind(NioServerSocketChannel.java:130)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.bind(AbstractChannel.java:562)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.bind(DefaultChannelPipeline.java:1358)
	at io.netty.channel.AbstractChannelHandlerContext.invokeBind(AbstractChannelHandlerContext.java:501)
	at io.netty.channel.AbstractChannelHandlerContext.bind(AbstractChannelHandlerContext.java:486)
	at io.netty.channel.DefaultChannelPipeline.bind(DefaultChannelPipeline.java:1019)
	at io.netty.channel.AbstractChannel.bind(AbstractChannel.java:258)
	at io.netty.bootstrap.AbstractBootstrap$2.run(AbstractBootstrap.java:366)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:474)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:909)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2019-07-02 07:03:27  [main:2986] - [WARN]   [DUBBO] Fail to start qos server: , dubbo version: 2.6.6, current host: 172.27.35.1
java.net.BindException: Address already in use: bind
	at sun.nio.ch.Net.bind0(Native Method)
	at sun.nio.ch.Net.bind(Net.java:433)
	at sun.nio.ch.Net.bind(Net.java:425)
	at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:223)
	at io.netty.channel.socket.nio.NioServerSocketChannel.doBind(NioServerSocketChannel.java:130)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.bind(AbstractChannel.java:562)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.bind(DefaultChannelPipeline.java:1358)
	at io.netty.channel.AbstractChannelHandlerContext.invokeBind(AbstractChannelHandlerContext.java:501)
	at io.netty.channel.AbstractChannelHandlerContext.bind(AbstractChannelHandlerContext.java:486)
	at io.netty.channel.DefaultChannelPipeline.bind(DefaultChannelPipeline.java:1019)
	at io.netty.channel.AbstractChannel.bind(AbstractChannel.java:258)
	at io.netty.bootstrap.AbstractBootstrap$2.run(AbstractBootstrap.java:366)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:474)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:909)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2019-07-02 07:03:27  [main:2990] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:27  [main:3006] - [INFO]   [DUBBO] Load registry store file C:\Users\14467\.dubbo\dubbo-registry-annotation-consumer-127.0.0.1:2182.cache, data: {com.self.study.api.DemoService=empty://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=configurators&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=11812&side=consumer&timestamp=1562022152516 empty://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=11812&side=consumer&timestamp=1562022152516 dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:37  [main:12233] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:37  [main:12253] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:37  [main:12273] - [INFO]   [DUBBO] Register: consumer://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=consumers&check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=5108&side=consumer&timestamp=1562022205758, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:37  [main:12643] - [INFO]   [DUBBO] Subscribe: consumer://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=5108&side=consumer&timestamp=1562022205758, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:37  [main:12667] - [INFO]   [DUBBO] Notify urls for subscribe url consumer://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=5108&side=consumer&timestamp=1562022205758, urls: [dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128, empty://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=configurators&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=5108&side=consumer&timestamp=1562022205758, empty://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=5108&side=consumer&timestamp=1562022205758], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:37  [main:12697] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:37  [main:12728] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:37  [main:12746] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:37  [main:12830] - [INFO]   [DUBBO] Successed connect to server /172.27.35.1:20880 from NettyClient 172.27.35.1 using dubbo version 2.6.6, channel is NettyChannel [channel=[id: 0x01e13589, L:/172.27.35.1:52831 - R:/172.27.35.1:20880]], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:37  [main:12831] - [INFO]   [DUBBO] Start NettyClient DESKTOP-T5RQKO2/172.27.35.1 connect to the server /172.27.35.1:20880, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:37  [main:12910] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.rpc.Invocation arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
if (arg1 == null) throw new IllegalArgumentException("invocation == null");
String methodName = arg1.getMethodName();
String extName = url.getMethodParameter(methodName, "cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:37  [main:12921] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:37  [main:12934] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:37  [main:12951] - [INFO]   [DUBBO] Refer dubbo service com.self.study.api.DemoService from url zookeeper://127.0.0.1:2182/com.alibaba.dubbo.registry.RegistryService?anyhost=true&application=annotation-consumer&bean.name=providers:dubbo:com.self.study.api.DemoService&check=false&default.timeout=3000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=5108&register.ip=172.27.35.1&remote.timestamp=1562022040128&side=consumer&timestamp=1562022205758, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:37  [DubboServerHandler-172.27.35.1:20880-thread-20:178987] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:37  [DubboClientHandler-172.27.35.1:20880-thread-1:13170] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:37  [DubboServerHandler-172.27.35.1:20880-thread-21:179017] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:37  [DubboClientHandler-172.27.35.1:20880-thread-1:13177] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:37  [DubboServerHandler-172.27.35.1:20880-thread-22:179023] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:38  [DubboClientHandler-172.27.35.1:20880-thread-1:13182] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:38  [DubboServerHandler-172.27.35.1:20880-thread-23:179028] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:38  [DubboClientHandler-172.27.35.1:20880-thread-1:13186] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:38  [DubboShutdownHook:13188] - [INFO]   [DUBBO] Run shutdown hook now., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:38  [DubboShutdownHook:13190] - [INFO]   [DUBBO] Close all registries [zookeeper://127.0.0.1:2182/com.alibaba.dubbo.registry.RegistryService?application=annotation-consumer&dubbo=2.0.2&interface=com.alibaba.dubbo.registry.RegistryService&pid=5108&timestamp=1562022205839], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:38  [DubboShutdownHook:13191] - [INFO]   [DUBBO] Destroy registry:zookeeper://127.0.0.1:2182/com.alibaba.dubbo.registry.RegistryService?application=annotation-consumer&dubbo=2.0.2&interface=com.alibaba.dubbo.registry.RegistryService&pid=5108&timestamp=1562022205839, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:38  [DubboShutdownHook:13192] - [INFO]   [DUBBO] Unregister: consumer://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=consumers&check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=5108&side=consumer&timestamp=1562022205758, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:38  [DubboShutdownHook:13212] - [INFO]   [DUBBO] Destroy unregister url consumer://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=consumers&check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=5108&side=consumer&timestamp=1562022205758, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:38  [DubboShutdownHook:13213] - [INFO]   [DUBBO] Unsubscribe: consumer://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=5108&side=consumer&timestamp=1562022205758, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:38  [DubboShutdownHook:13213] - [INFO]   [DUBBO] Destroy unsubscribe url consumer://172.27.35.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=5108&side=consumer&timestamp=1562022205758, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:38  [DubboShutdownHook:13226] - [INFO]   [DUBBO] Close dubbo connect: /172.27.35.1:52831-->/172.27.35.1:20880, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:38  [DubboShutdownHook:13228] - [INFO]   [DUBBO] Close netty channel [id: 0x01e13589, L:/172.27.35.1:52831 - R:/172.27.35.1:20880], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:38  [NettyServerWorker-5-4:179073] - [WARN]   [DUBBO] All clients has discontected from /172.27.35.1:20880. You can graceful shutdown now., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:38  [DubboShutdownHook:13231] - [INFO]   [DUBBO] Close dubbo connect: 172.27.35.1:0-->172.27.35.1:20880, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:38  [DubboServerHandler-172.27.35.1:20880-thread-24:179075] - [INFO]   [DUBBO] disconnected from /172.27.35.1:52831,url:dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&bind.ip=172.27.35.1&bind.port=20880&channel.readonly.sent=true&codec=dubbo&default.timeout=1000&dubbo=2.0.2&generic=false&heartbeat=60000&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:38  [DubboShutdownHook:13232] - [INFO]   [DUBBO] Destroy reference: dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-consumer&bean.name=providers:dubbo:com.self.study.api.DemoService&check=false&default.timeout=3000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=5108&register.ip=172.27.35.1&remote.timestamp=1562022040128&side=consumer&timestamp=1562022205758, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:03:38  [DubboShutdownHook:13233] - [INFO]   [DUBBO] qos-server stopped., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:30  [main:0] - [INFO]  using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2019-07-02 07:04:30  [main:15] - [INFO]   [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:30  [main:16] - [INFO]   [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:30  [main:93] - [INFO]   [DUBBO] The BeanDefinition[Root bean: class [com.alibaba.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean has been registered with name : providers:dubbo:com.self.study.api.DemoService, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:30  [main:94] - [INFO]   [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'provider': Generic bean: class [com.self.study.impl.services.Provider]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [C:\works\Runner_VIV\VIV-BAAS\all\dubbo-test\target\classes\com\self\study\impl\services\Provider.class]] } were scanned under package[com.self.study.impl.services], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:30  [main:547] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:30  [main:560] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, try to find an extension (bean) of type java.lang.String, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:30  [main:560] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, type:java.lang.String found, stop get bean., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:30  [main:727] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0, boolean arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:31  [main:841] - [INFO]   [DUBBO] The service ready on spring started. service: com.self.study.api.DemoService, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:31  [main:945] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.rpc.Invocation arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
if (arg1 == null) throw new IllegalArgumentException("invocation == null");
String methodName = arg1.getMethodName();
String extName = url.getMethodParameter(methodName, "cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:31  [main:975] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:31  [main:998] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:31  [main:1019] - [INFO]   [DUBBO] Export dubbo service com.self.study.api.DemoService to local registry, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:31  [main:1020] - [INFO]   [DUBBO] Export dubbo service com.self.study.api.DemoService to url dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&bind.ip=172.27.35.1&bind.port=20880&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13540&side=provider&timestamp=1562022271125, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:31  [main:1021] - [INFO]   [DUBBO] Register dubbo service com.self.study.api.DemoService url dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&bind.ip=172.27.35.1&bind.port=20880&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13540&side=provider&timestamp=1562022271125 to registry registry://127.0.0.1:2182/com.alibaba.dubbo.registry.RegistryService?application=annotation-provider&dubbo=2.0.2&pid=13540&registry=zookeeper&timestamp=1562022271113, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:31  [main:1034] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:31  [main:1052] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:32  [main:2228] - [INFO]   [DUBBO] qos-server bind localhost:22222, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:32  [main:2251] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:32  [main:2280] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:32  [main:2295] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:32  [main:2346] - [INFO]   [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /172.27.35.1:20880, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:32  [main:2355] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:32  [main:2375] - [INFO]   [DUBBO] Load registry store file C:\Users\14467\.dubbo\dubbo-registry-annotation-provider-127.0.0.1:2182.cache, data: {com.self.study.api.DemoService=empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=560&side=provider&timestamp=1562022040128}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:41  [main:11632] - [INFO]   [DUBBO] Register: dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13540&side=provider&timestamp=1562022271125, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:42  [main:12086] - [INFO]   [DUBBO] Subscribe: provider://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13540&side=provider&timestamp=1562022271125, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:42  [main:12096] - [INFO]   [DUBBO] Notify urls for subscribe url provider://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13540&side=provider&timestamp=1562022271125, urls: [empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13540&side=provider&timestamp=1562022271125], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:42  [main:12099] - [DEBUG]   [DUBBO] original override urls: [empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13540&side=provider&timestamp=1562022271125], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:42  [main:12099] - [DEBUG]   [DUBBO] subscribe url: provider://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13540&side=provider&timestamp=1562022271125, override urls: [empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13540&side=provider&timestamp=1562022271125], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:42  [main:12108] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:04:42  [main:12119] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:05:04  [main-EventThread:34185] - [INFO]   [DUBBO] Notify urls for subscribe url provider://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13540&side=provider&timestamp=1562022271125, urls: [empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13540&side=provider&timestamp=1562022271125], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:05:04  [main-EventThread:34187] - [DEBUG]   [DUBBO] original override urls: [empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13540&side=provider&timestamp=1562022271125], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:05:04  [main-EventThread:34188] - [DEBUG]   [DUBBO] subscribe url: provider://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13540&side=provider&timestamp=1562022271125, override urls: [empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13540&side=provider&timestamp=1562022271125], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:05:45  [main-EventThread:75554] - [INFO]   [DUBBO] Notify urls for subscribe url provider://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13540&side=provider&timestamp=1562022271125, urls: [empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13540&side=provider&timestamp=1562022271125], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:05:45  [main-EventThread:75556] - [DEBUG]   [DUBBO] original override urls: [empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13540&side=provider&timestamp=1562022271125], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:05:45  [main-EventThread:75556] - [DEBUG]   [DUBBO] subscribe url: provider://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13540&side=provider&timestamp=1562022271125, override urls: [empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13540&side=provider&timestamp=1562022271125], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:07:15  [main:0] - [INFO]  using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2019-07-02 07:07:15  [main:17] - [INFO]   [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:07:15  [main:18] - [INFO]   [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:07:15  [main:86] - [INFO]   [DUBBO] The BeanDefinition[Root bean: class [com.alibaba.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean has been registered with name : providers:dubbo:com.self.study.api.DemoService, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:07:15  [main:87] - [INFO]   [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'provider': Generic bean: class [com.self.study.impl.services.Provider]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [C:\works\Runner_VIV\VIV-BAAS\all\dubbo-test\target\classes\com\self\study\impl\services\Provider.class]] } were scanned under package[com.self.study.impl.services], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:07:16  [main:556] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:07:16  [main:564] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, try to find an extension (bean) of type java.lang.String, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:07:16  [main:565] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, type:java.lang.String found, stop get bean., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:07:16  [main:737] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0, boolean arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:07:16  [main:845] - [INFO]   [DUBBO] The service ready on spring started. service: com.self.study.api.DemoService, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:07:16  [main:942] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.rpc.Invocation arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
if (arg1 == null) throw new IllegalArgumentException("invocation == null");
String methodName = arg1.getMethodName();
String extName = url.getMethodParameter(methodName, "cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:07:16  [main:965] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:07:16  [main:985] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:07:16  [main:1011] - [INFO]   [DUBBO] Export dubbo service com.self.study.api.DemoService to local registry, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:07:16  [main:1012] - [INFO]   [DUBBO] Export dubbo service com.self.study.api.DemoService to url dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&bind.ip=172.27.35.1&bind.port=20880&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13364&side=provider&timestamp=1562022436519, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:07:16  [main:1012] - [INFO]   [DUBBO] Register dubbo service com.self.study.api.DemoService url dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&bind.ip=172.27.35.1&bind.port=20880&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13364&side=provider&timestamp=1562022436519 to registry registry://127.0.0.1:2182/com.alibaba.dubbo.registry.RegistryService?application=annotation-provider&dubbo=2.0.2&pid=13364&registry=zookeeper&timestamp=1562022436509, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:07:16  [main:1022] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:07:16  [main:1041] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:07:17  [main:2239] - [INFO]   [DUBBO] qos-server bind localhost:22222, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:07:17  [main:2256] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:07:17  [main:2277] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:07:17  [main:2295] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:07:17  [main:2340] - [INFO]   [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /172.27.35.1:20880, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:07:18  [main:2347] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:07:18  [main:2365] - [INFO]   [DUBBO] Load registry store file C:\Users\14467\.dubbo\dubbo-registry-annotation-provider-127.0.0.1:2182.cache, data: {com.self.study.api.DemoService=empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13540&side=provider&timestamp=1562022271125}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:07:27  [main:11616] - [INFO]   [DUBBO] Register: dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13364&side=provider&timestamp=1562022436519, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:04  [main:0] - [INFO]  using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2019-07-02 07:08:04  [main:16] - [INFO]   [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:04  [main:17] - [INFO]   [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:04  [main:94] - [INFO]   [DUBBO] The BeanDefinition[Root bean: class [com.alibaba.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean has been registered with name : providers:dubbo:com.self.study.api.DemoService, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:04  [main:95] - [INFO]   [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'provider': Generic bean: class [com.self.study.impl.services.Provider]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [C:\works\Runner_VIV\VIV-BAAS\all\dubbo-test\target\classes\com\self\study\impl\services\Provider.class]] } were scanned under package[com.self.study.impl.services], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:05  [main:734] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:05  [main:747] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, try to find an extension (bean) of type java.lang.String, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:05  [main:748] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, type:java.lang.String found, stop get bean., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:05  [main:919] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0, boolean arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:05  [main:1051] - [INFO]   [DUBBO] The service ready on spring started. service: com.self.study.api.DemoService, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:06  [main:1193] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.rpc.Invocation arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
if (arg1 == null) throw new IllegalArgumentException("invocation == null");
String methodName = arg1.getMethodName();
String extName = url.getMethodParameter(methodName, "cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:06  [main:1219] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:06  [main:1239] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:06  [main:1260] - [INFO]   [DUBBO] Export dubbo service com.self.study.api.DemoService to local registry, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:06  [main:1261] - [INFO]   [DUBBO] Export dubbo service com.self.study.api.DemoService to url dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&bind.ip=172.27.35.1&bind.port=20880&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=14932&side=provider&timestamp=1562022485944, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:06  [main:1262] - [INFO]   [DUBBO] Register dubbo service com.self.study.api.DemoService url dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&bind.ip=172.27.35.1&bind.port=20880&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=14932&side=provider&timestamp=1562022485944 to registry registry://127.0.0.1:2182/com.alibaba.dubbo.registry.RegistryService?application=annotation-provider&dubbo=2.0.2&pid=14932&registry=zookeeper&timestamp=1562022485928, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:06  [main:1275] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:06  [main:1301] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:07  [main:2558] - [INFO]   [DUBBO] qos-server bind localhost:22222, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:07  [main:2585] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:07  [main:2616] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:07  [main:2637] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:07  [main:2703] - [INFO]   [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /172.27.35.1:20880, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:07  [main:2715] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:07  [main:2743] - [INFO]   [DUBBO] Load registry store file C:\Users\14467\.dubbo\dubbo-registry-annotation-provider-127.0.0.1:2182.cache, data: {com.self.study.api.DemoService=empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13540&side=provider&timestamp=1562022271125}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:16  [main:11962] - [INFO]   [DUBBO] Register: dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=14932&side=provider&timestamp=1562022485944, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:24  [main:0] - [INFO]  using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2019-07-02 07:08:24  [main:19] - [INFO]   [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:24  [main:19] - [INFO]   [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:25  [main:85] - [INFO]   [DUBBO] The BeanDefinition[Root bean: class [com.alibaba.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean has been registered with name : providers:dubbo:com.self.study.api.DemoService, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:25  [main:86] - [INFO]   [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'provider': Generic bean: class [com.self.study.impl.services.Provider]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [C:\works\Runner_VIV\VIV-BAAS\all\dubbo-test\target\classes\com\self\study\impl\services\Provider.class]] } were scanned under package[com.self.study.impl.services], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:25  [main:547] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:25  [main:556] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, try to find an extension (bean) of type java.lang.String, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:25  [main:557] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, type:java.lang.String found, stop get bean., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:25  [main:749] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0, boolean arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:25  [main:860] - [INFO]   [DUBBO] The service ready on spring started. service: com.self.study.api.DemoService, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:25  [main:972] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.rpc.Invocation arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
if (arg1 == null) throw new IllegalArgumentException("invocation == null");
String methodName = arg1.getMethodName();
String extName = url.getMethodParameter(methodName, "cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:25  [main:995] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:25  [main:1018] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:25  [main:1039] - [INFO]   [DUBBO] Export dubbo service com.self.study.api.DemoService to local registry, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:25  [main:1039] - [INFO]   [DUBBO] Export dubbo service com.self.study.api.DemoService to url dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&bind.ip=172.27.35.1&bind.port=20880&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=11736&side=provider&timestamp=1562022505834, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:25  [main:1040] - [INFO]   [DUBBO] Register dubbo service com.self.study.api.DemoService url dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&bind.ip=172.27.35.1&bind.port=20880&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=11736&side=provider&timestamp=1562022505834 to registry registry://127.0.0.1:2183/com.alibaba.dubbo.registry.RegistryService?application=annotation-provider&dubbo=2.0.2&pid=11736&registry=zookeeper&timestamp=1562022505820, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:26  [main:1053] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:26  [main:1076] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:27  [main:2144] - [INFO]   [DUBBO] qos-server bind localhost:22222, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:27  [main:2166] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:27  [main:2192] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:27  [main:2211] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:27  [main:2265] - [INFO]   [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /172.27.35.1:20880, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:27  [main:2276] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:36  [main:11515] - [INFO]   [DUBBO] Register: dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=11736&side=provider&timestamp=1562022505834, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:37  [main:12253] - [INFO]   [DUBBO] Subscribe: provider://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=11736&side=provider&timestamp=1562022505834, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:37  [main:12269] - [INFO]   [DUBBO] Notify urls for subscribe url provider://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=11736&side=provider&timestamp=1562022505834, urls: [empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=11736&side=provider&timestamp=1562022505834], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:37  [main:12271] - [DEBUG]   [DUBBO] original override urls: [empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=11736&side=provider&timestamp=1562022505834], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:37  [main:12271] - [DEBUG]   [DUBBO] subscribe url: provider://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=11736&side=provider&timestamp=1562022505834, override urls: [empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=11736&side=provider&timestamp=1562022505834], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:37  [main:12282] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:08:37  [main:12294] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:10:46  [main:0] - [INFO]  using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2019-07-02 07:10:46  [main:33] - [INFO]   [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:10:46  [main:33] - [INFO]   [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:10:46  [main:116] - [INFO]   [DUBBO] The BeanDefinition[Root bean: class [com.alibaba.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean has been registered with name : providers:dubbo:com.self.study.api.DemoService, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:10:46  [main:117] - [INFO]   [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'provider': Generic bean: class [com.self.study.impl.services.Provider]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [C:\works\Runner_VIV\VIV-BAAS\all\dubbo-test\target\classes\com\self\study\impl\services\Provider.class]] } were scanned under package[com.self.study.impl.services], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:10:46  [main:736] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:10:46  [main:746] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, try to find an extension (bean) of type java.lang.String, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:10:46  [main:747] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, type:java.lang.String found, stop get bean., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:10:47  [main:973] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0, boolean arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:10:47  [main:1095] - [INFO]   [DUBBO] The service ready on spring started. service: com.self.study.api.DemoService, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:10:47  [main:1247] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.rpc.Invocation arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
if (arg1 == null) throw new IllegalArgumentException("invocation == null");
String methodName = arg1.getMethodName();
String extName = url.getMethodParameter(methodName, "cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:10:47  [main:1271] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:10:47  [main:1289] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:10:47  [main:1309] - [INFO]   [DUBBO] Export dubbo service com.self.study.api.DemoService to local registry, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:10:47  [main:1310] - [INFO]   [DUBBO] Export dubbo service com.self.study.api.DemoService to url dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&bind.ip=172.27.35.1&bind.port=20880&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13252&side=provider&timestamp=1562022647232, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:10:47  [main:1311] - [INFO]   [DUBBO] Register dubbo service com.self.study.api.DemoService url dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&bind.ip=172.27.35.1&bind.port=20880&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13252&side=provider&timestamp=1562022647232 to registry registry://127.0.0.1:2183/com.alibaba.dubbo.registry.RegistryService?application=annotation-provider&dubbo=2.0.2&pid=13252&registry=zookeeper&timestamp=1562022647213, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:10:47  [main:1324] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:10:47  [main:1339] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:11:18  [main:32641] - [INFO]   [DUBBO] qos-server bind localhost:22222, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:11:18  [main:32674] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:11:18  [main:32704] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:11:18  [main:32724] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:11:18  [main:32786] - [INFO]   [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /172.27.35.1:20880, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:11:18  [main:32797] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:11:18  [main:32816] - [INFO]   [DUBBO] Load registry store file C:\Users\14467\.dubbo\dubbo-registry-annotation-provider-127.0.0.1:2183.cache, data: {com.self.study.api.DemoService=empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=11736&side=provider&timestamp=1562022505834}, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:14:13  [main:207072] - [INFO]   [DUBBO] Register: dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13252&side=provider&timestamp=1562022647232, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:14:13  [DubboShutdownHook:207164] - [INFO]   [DUBBO] Run shutdown hook now., dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:14:13  [DubboShutdownHook:207168] - [INFO]   [DUBBO] Close all registries [zookeeper://127.0.0.1:2183/com.alibaba.dubbo.registry.RegistryService?application=annotation-provider&dubbo=2.0.2&interface=com.alibaba.dubbo.registry.RegistryService&pid=13252&timestamp=1562022647213], dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:14:13  [DubboShutdownHook:207169] - [INFO]   [DUBBO] Destroy registry:zookeeper://127.0.0.1:2183/com.alibaba.dubbo.registry.RegistryService?application=annotation-provider&dubbo=2.0.2&interface=com.alibaba.dubbo.registry.RegistryService&pid=13252&timestamp=1562022647213, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:14:13  [DubboShutdownHook:207169] - [INFO]   [DUBBO] Unregister: dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13252&side=provider&timestamp=1562022647232, dubbo version: 2.6.6, current host: 172.27.35.1
2019-07-02 07:14:20  [DubboShutdownHook:214487] - [WARN]   [DUBBO] Failed to unregister url dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13252&side=provider&timestamp=1562022647232 to registry zookeeper://127.0.0.1:2183/com.alibaba.dubbo.registry.RegistryService?application=annotation-provider&dubbo=2.0.2&interface=com.alibaba.dubbo.registry.RegistryService&pid=13252&timestamp=1562022647213 on destroy, cause: Failed to unregister dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13252&side=provider&timestamp=1562022647232 to registry 127.0.0.1:2183, cause: Failed to unregister dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13252&side=provider&timestamp=1562022647232 to zookeeper zookeeper://127.0.0.1:2183/com.alibaba.dubbo.registry.RegistryService?application=annotation-provider&dubbo=2.0.2&interface=com.alibaba.dubbo.registry.RegistryService&pid=13252&timestamp=1562022647213, cause: KeeperErrorCode = ConnectionLoss for /dubbo/com.self.study.api.DemoService/providers/dubbo%3A%2F%2F172.27.35.1%3A20880%2Fcom.self.study.api.DemoService%3Fanyhost%3Dtrue%26application%3Dannotation-provider%26bean.name%3Dproviders%3Adubbo%3Acom.self.study.api.DemoService%26default.timeout%3D1000%26dubbo%3D2.0.2%26generic%3Dfalse%26interface%3Dcom.self.study.api.DemoService%26methods%3DsayHello%26pid%3D13252%26side%3Dprovider%26timestamp%3D1562022647232, dubbo version: 2.6.6, current host: 172.27.35.1
java.lang.IllegalStateException: Failed to unregister dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13252&side=provider&timestamp=1562022647232 to registry 127.0.0.1:2183, cause: Failed to unregister dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13252&side=provider&timestamp=1562022647232 to zookeeper zookeeper://127.0.0.1:2183/com.alibaba.dubbo.registry.RegistryService?application=annotation-provider&dubbo=2.0.2&interface=com.alibaba.dubbo.registry.RegistryService&pid=13252&timestamp=1562022647213, cause: KeeperErrorCode = ConnectionLoss for /dubbo/com.self.study.api.DemoService/providers/dubbo%3A%2F%2F172.27.35.1%3A20880%2Fcom.self.study.api.DemoService%3Fanyhost%3Dtrue%26application%3Dannotation-provider%26bean.name%3Dproviders%3Adubbo%3Acom.self.study.api.DemoService%26default.timeout%3D1000%26dubbo%3D2.0.2%26generic%3Dfalse%26interface%3Dcom.self.study.api.DemoService%26methods%3DsayHello%26pid%3D13252%26side%3Dprovider%26timestamp%3D1562022647232
	at com.alibaba.dubbo.registry.support.FailbackRegistry.unregister(FailbackRegistry.java:180)
	at com.alibaba.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:458)
	at com.alibaba.dubbo.registry.support.FailbackRegistry.destroy(FailbackRegistry.java:443)
	at com.alibaba.dubbo.registry.zookeeper.ZookeeperRegistry.destroy(ZookeeperRegistry.java:103)
	at com.alibaba.dubbo.registry.support.AbstractRegistryFactory.destroyAll(AbstractRegistryFactory.java:71)
	at com.alibaba.dubbo.config.DubboShutdownHook.destroyAll(DubboShutdownHook.java:69)
	at com.alibaba.dubbo.config.DubboShutdownHook.run(DubboShutdownHook.java:58)
Caused by: com.alibaba.dubbo.rpc.RpcException: Failed to unregister dubbo://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=13252&side=provider&timestamp=1562022647232 to zookeeper zookeeper://127.0.0.1:2183/com.alibaba.dubbo.registry.RegistryService?application=annotation-provider&dubbo=2.0.2&interface=com.alibaba.dubbo.registry.RegistryService&pid=13252&timestamp=1562022647213, cause: KeeperErrorCode = ConnectionLoss for /dubbo/com.self.study.api.DemoService/providers/dubbo%3A%2F%2F172.27.35.1%3A20880%2Fcom.self.study.api.DemoService%3Fanyhost%3Dtrue%26application%3Dannotation-provider%26bean.name%3Dproviders%3Adubbo%3Acom.self.study.api.DemoService%26default.timeout%3D1000%26dubbo%3D2.0.2%26generic%3Dfalse%26interface%3Dcom.self.study.api.DemoService%26methods%3DsayHello%26pid%3D13252%26side%3Dprovider%26timestamp%3D1562022647232
	at com.alibaba.dubbo.registry.zookeeper.ZookeeperRegistry.doUnregister(ZookeeperRegistry.java:125)
	at com.alibaba.dubbo.registry.support.FailbackRegistry.unregister(FailbackRegistry.java:167)
	... 6 more
Caused by: java.lang.IllegalStateException: KeeperErrorCode = ConnectionLoss for /dubbo/com.self.study.api.DemoService/providers/dubbo%3A%2F%2F172.27.35.1%3A20880%2Fcom.self.study.api.DemoService%3Fanyhost%3Dtrue%26application%3Dannotation-provider%26bean.name%3Dproviders%3Adubbo%3Acom.self.study.api.DemoService%26default.timeout%3D1000%26dubbo%3D2.0.2%26generic%3Dfalse%26interface%3Dcom.self.study.api.DemoService%26methods%3DsayHello%26pid%3D13252%26side%3Dprovider%26timestamp%3D1562022647232
	at com.alibaba.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient.delete(CuratorZookeeperClient.java:99)
	at com.alibaba.dubbo.registry.zookeeper.ZookeeperRegistry.doUnregister(ZookeeperRegistry.java:123)
	... 7 more
Caused by: org.apache.zookeeper.KeeperException$ConnectionLossException: KeeperErrorCode = ConnectionLoss for /dubbo/com.self.study.api.DemoService/providers/dubbo%3A%2F%2F172.27.35.1%3A20880%2Fcom.self.study.api.DemoService%3Fanyhost%3Dtrue%26application%3Dannotation-provider%26bean.name%3Dproviders%3Adubbo%3Acom.self.study.api.DemoService%26default.timeout%3D1000%26dubbo%3D2.0.2%26generic%3Dfalse%26interface%3Dcom.self.study.api.DemoService%26methods%3DsayHello%26pid%3D13252%26side%3Dprovider%26timestamp%3D1562022647232
	at org.apache.zookeeper.KeeperException.create(KeeperException.java:102)
	at org.apache.zookeeper.KeeperException.create(KeeperException.java:54)
	at org.apache.zookeeper.ZooKeeper.delete(ZooKeeper.java:876)
	at org.apache.curator.framework.imps.DeleteBuilderImpl$5.call(DeleteBuilderImpl.java:274)
	at org.apache.curator.framework.imps.DeleteBuilderImpl$5.call(DeleteBuilderImpl.java:268)
	at org.apache.curator.connection.StandardConnectionHandlingPolicy.callWithRetry(StandardConnectionHandlingPolicy.java:64)
	at org.apache.curator.RetryLoop.callWithRetry(RetryLoop.java:100)
	at org.apache.curator.framework.imps.DeleteBuilderImpl.pathInForeground(DeleteBuilderImpl.java:265)
	at org.apache.curator.framework.imps.DeleteBuilderImpl.forPath(DeleteBuilderImpl.java:249)
	at org.apache.curator.framework.imps.DeleteBuilderImpl.forPath(DeleteBuilderImpl.java:34)
	at com.alibaba.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient.delete(CuratorZookeeperClient.java:96)
	... 8 more
2019-07-02 07:21:56  [main:0] - [INFO]  using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2019-07-02 07:21:56  [main:19] - [INFO]   [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:21:56  [main:20] - [INFO]   [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:21:56  [main:107] - [INFO]   [DUBBO] The BeanDefinition[Root bean: class [com.alibaba.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean has been registered with name : providers:dubbo:com.self.study.api.DemoService, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:21:56  [main:108] - [INFO]   [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'provider': Generic bean: class [com.self.study.impl.services.Provider]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [C:\works\Runner_VIV\VIV-BAAS\all\dubbo-test\target\classes\com\self\study\impl\services\Provider.class]] } were scanned under package[com.self.study.impl.services], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:21:57  [main:587] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:21:57  [main:599] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, try to find an extension (bean) of type java.lang.String, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:21:57  [main:599] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, type:java.lang.String found, stop get bean., dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:21:57  [main:788] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0, boolean arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:21:57  [main:887] - [INFO]   [DUBBO] The service ready on spring started. service: com.self.study.api.DemoService, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:21:57  [main:1004] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.rpc.Invocation arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
if (arg1 == null) throw new IllegalArgumentException("invocation == null");
String methodName = arg1.getMethodName();
String extName = url.getMethodParameter(methodName, "cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:21:57  [main:1037] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:21:57  [main:1065] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:21:57  [main:1096] - [INFO]   [DUBBO] Export dubbo service com.self.study.api.DemoService to local registry, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:21:57  [main:1096] - [INFO]   [DUBBO] Export dubbo service com.self.study.api.DemoService to url dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&bind.ip=192.168.48.1&bind.port=20880&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=1192&side=provider&timestamp=1562023317770, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:21:57  [main:1097] - [INFO]   [DUBBO] Register dubbo service com.self.study.api.DemoService url dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&bind.ip=192.168.48.1&bind.port=20880&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=1192&side=provider&timestamp=1562023317770 to registry registry://127.0.0.1:2183/com.alibaba.dubbo.registry.RegistryService?application=annotation-provider&dubbo=2.0.2&pid=1192&registry=zookeeper&timestamp=1562023317757, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:21:57  [main:1110] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:21:57  [main:1129] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:21:59  [main:2507] - [INFO]   [DUBBO] qos-server bind localhost:22222, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:21:59  [main:2540] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:21:59  [main:2570] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:21:59  [main:2598] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:21:59  [main:2660] - [INFO]   [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /192.168.48.1:20880, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:21:59  [main:2670] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:21:59  [main:2702] - [INFO]   [DUBBO] Load registry store file C:\Users\14467\.dubbo\dubbo-registry-annotation-provider-127.0.0.1:2183.cache, data: {com.self.study.api.DemoService=empty://172.27.35.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=11736&side=provider&timestamp=1562022505834}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:22:08  [main:11934] - [INFO]   [DUBBO] Register: dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=1192&side=provider&timestamp=1562023317770, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:22:09  [main:12605] - [INFO]   [DUBBO] Subscribe: provider://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=1192&side=provider&timestamp=1562023317770, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:22:09  [main:12623] - [INFO]   [DUBBO] Notify urls for subscribe url provider://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=1192&side=provider&timestamp=1562023317770, urls: [empty://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=1192&side=provider&timestamp=1562023317770], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:22:09  [main:12625] - [DEBUG]   [DUBBO] original override urls: [empty://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=1192&side=provider&timestamp=1562023317770], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:22:09  [main:12626] - [DEBUG]   [DUBBO] subscribe url: provider://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=1192&side=provider&timestamp=1562023317770, override urls: [empty://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=1192&side=provider&timestamp=1562023317770], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:22:09  [main:12638] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:22:09  [main:12650] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:22:54  [main:1] - [INFO]  using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2019-07-02 07:22:54  [main:36] - [INFO]   [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:22:54  [main:36] - [INFO]   [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:22:54  [main:42] - [WARN]   [DUBBO] No Spring Bean annotating Dubbo's @Service was found under package[com.self.study.impl.consumer], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:22:54  [main:392] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:22:54  [main:401] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, try to find an extension (bean) of type java.lang.String, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:22:54  [main:403] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, type:java.lang.String found, stop get bean., dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:22:54  [main:615] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:22:54  [main:648] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0, boolean arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:22:55  [main:850] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:22:56  [main:2711] - [ERROR]   [DUBBO] qos-server can not bind localhost:22222, dubbo version: 2.6.6, current host: 192.168.48.1
java.net.BindException: Address already in use: bind
	at sun.nio.ch.Net.bind0(Native Method)
	at sun.nio.ch.Net.bind(Net.java:433)
	at sun.nio.ch.Net.bind(Net.java:425)
	at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:223)
	at io.netty.channel.socket.nio.NioServerSocketChannel.doBind(NioServerSocketChannel.java:130)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.bind(AbstractChannel.java:562)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.bind(DefaultChannelPipeline.java:1358)
	at io.netty.channel.AbstractChannelHandlerContext.invokeBind(AbstractChannelHandlerContext.java:501)
	at io.netty.channel.AbstractChannelHandlerContext.bind(AbstractChannelHandlerContext.java:486)
	at io.netty.channel.DefaultChannelPipeline.bind(DefaultChannelPipeline.java:1019)
	at io.netty.channel.AbstractChannel.bind(AbstractChannel.java:258)
	at io.netty.bootstrap.AbstractBootstrap$2.run(AbstractBootstrap.java:366)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:474)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:909)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2019-07-02 07:22:56  [main:2761] - [WARN]   [DUBBO] Fail to start qos server: , dubbo version: 2.6.6, current host: 192.168.48.1
java.net.BindException: Address already in use: bind
	at sun.nio.ch.Net.bind0(Native Method)
	at sun.nio.ch.Net.bind(Net.java:433)
	at sun.nio.ch.Net.bind(Net.java:425)
	at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:223)
	at io.netty.channel.socket.nio.NioServerSocketChannel.doBind(NioServerSocketChannel.java:130)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.bind(AbstractChannel.java:562)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.bind(DefaultChannelPipeline.java:1358)
	at io.netty.channel.AbstractChannelHandlerContext.invokeBind(AbstractChannelHandlerContext.java:501)
	at io.netty.channel.AbstractChannelHandlerContext.bind(AbstractChannelHandlerContext.java:486)
	at io.netty.channel.DefaultChannelPipeline.bind(DefaultChannelPipeline.java:1019)
	at io.netty.channel.AbstractChannel.bind(AbstractChannel.java:258)
	at io.netty.bootstrap.AbstractBootstrap$2.run(AbstractBootstrap.java:366)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:474)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:909)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2019-07-02 07:22:56  [main:2770] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:06  [main:12035] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:06  [main:12058] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:06  [main:12072] - [INFO]   [DUBBO] Register: consumer://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=consumers&check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=1796&side=consumer&timestamp=1562023374961, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:06  [main:12148] - [INFO]   [DUBBO] Subscribe: consumer://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=1796&side=consumer&timestamp=1562023374961, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:06  [main:12171] - [INFO]   [DUBBO] Notify urls for subscribe url consumer://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=1796&side=consumer&timestamp=1562023374961, urls: [dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=1192&side=provider&timestamp=1562023317770, empty://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=configurators&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=1796&side=consumer&timestamp=1562023374961, empty://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=1796&side=consumer&timestamp=1562023374961], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:06  [main:12236] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:06  [main:12274] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:06  [main:12291] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:06  [main:12381] - [INFO]   [DUBBO] Successed connect to server /192.168.48.1:20880 from NettyClient 192.168.48.1 using dubbo version 2.6.6, channel is NettyChannel [channel=[id: 0x649002ba, L:/192.168.48.1:50635 - R:/192.168.48.1:20880]], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:06  [main:12381] - [INFO]   [DUBBO] Start NettyClient DESKTOP-T5RQKO2/192.168.48.1 connect to the server /192.168.48.1:20880, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:06  [main:12469] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.rpc.Invocation arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
if (arg1 == null) throw new IllegalArgumentException("invocation == null");
String methodName = arg1.getMethodName();
String extName = url.getMethodParameter(methodName, "cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:06  [main:12486] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:06  [main:12502] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:06  [main:12523] - [INFO]   [DUBBO] Refer dubbo service com.self.study.api.DemoService from url zookeeper://127.0.0.1:2183/com.alibaba.dubbo.registry.RegistryService?anyhost=true&application=annotation-consumer&bean.name=providers:dubbo:com.self.study.api.DemoService&check=false&default.timeout=3000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=1796&register.ip=192.168.48.1&remote.timestamp=1562023317770&side=consumer&timestamp=1562023374961, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:07  [DubboServerHandler-192.168.48.1:20880-thread-2:70199] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:07  [DubboClientHandler-192.168.48.1:20880-thread-1:12915] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:07  [DubboServerHandler-192.168.48.1:20880-thread-3:70240] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:07  [DubboClientHandler-192.168.48.1:20880-thread-1:12922] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:07  [DubboServerHandler-192.168.48.1:20880-thread-4:70246] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:07  [DubboClientHandler-192.168.48.1:20880-thread-1:12926] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:07  [DubboServerHandler-192.168.48.1:20880-thread-5:70250] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:07  [DubboClientHandler-192.168.48.1:20880-thread-1:12930] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:07  [DubboShutdownHook:12932] - [INFO]   [DUBBO] Run shutdown hook now., dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:07  [DubboShutdownHook:12933] - [INFO]   [DUBBO] Close all registries [zookeeper://127.0.0.1:2183/com.alibaba.dubbo.registry.RegistryService?application=annotation-consumer&dubbo=2.0.2&interface=com.alibaba.dubbo.registry.RegistryService&pid=1796&timestamp=1562023375017], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:07  [DubboShutdownHook:12934] - [INFO]   [DUBBO] Destroy registry:zookeeper://127.0.0.1:2183/com.alibaba.dubbo.registry.RegistryService?application=annotation-consumer&dubbo=2.0.2&interface=com.alibaba.dubbo.registry.RegistryService&pid=1796&timestamp=1562023375017, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:07  [DubboShutdownHook:12935] - [INFO]   [DUBBO] Unregister: consumer://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=consumers&check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=1796&side=consumer&timestamp=1562023374961, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:07  [DubboShutdownHook:12945] - [INFO]   [DUBBO] Destroy unregister url consumer://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=consumers&check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=1796&side=consumer&timestamp=1562023374961, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:07  [DubboShutdownHook:12945] - [INFO]   [DUBBO] Unsubscribe: consumer://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=1796&side=consumer&timestamp=1562023374961, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:07  [DubboShutdownHook:12945] - [INFO]   [DUBBO] Destroy unsubscribe url consumer://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=1796&side=consumer&timestamp=1562023374961, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:07  [DubboShutdownHook:12959] - [INFO]   [DUBBO] Close dubbo connect: /192.168.48.1:50635-->/192.168.48.1:20880, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:07  [DubboShutdownHook:12961] - [INFO]   [DUBBO] Close netty channel [id: 0x649002ba, L:/192.168.48.1:50635 - R:/192.168.48.1:20880], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:07  [DubboShutdownHook:12964] - [INFO]   [DUBBO] Close dubbo connect: 192.168.48.1:0-->192.168.48.1:20880, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:07  [DubboShutdownHook:12965] - [INFO]   [DUBBO] Destroy reference: dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-consumer&bean.name=providers:dubbo:com.self.study.api.DemoService&check=false&default.timeout=3000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=1796&register.ip=192.168.48.1&remote.timestamp=1562023317770&side=consumer&timestamp=1562023374961, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:07  [DubboShutdownHook:12965] - [INFO]   [DUBBO] qos-server stopped., dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:07  [NettyServerWorker-5-1:70301] - [WARN]   [DUBBO] All clients has discontected from /192.168.48.1:20880. You can graceful shutdown now., dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:23:07  [DubboServerHandler-192.168.48.1:20880-thread-6:70303] - [INFO]   [DUBBO] disconnected from /192.168.48.1:50635,url:dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&bind.ip=192.168.48.1&bind.port=20880&channel.readonly.sent=true&codec=dubbo&default.timeout=1000&dubbo=2.0.2&generic=false&heartbeat=60000&interface=com.self.study.api.DemoService&methods=sayHello&pid=1192&side=provider&timestamp=1562023317770, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:46  [main:0] - [INFO]  using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2019-07-02 07:24:46  [main:15] - [INFO]   [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:46  [main:16] - [INFO]   [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:46  [main:75] - [INFO]   [DUBBO] The BeanDefinition[Root bean: class [com.alibaba.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean has been registered with name : providers:dubbo:com.self.study.api.DemoService, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:46  [main:76] - [INFO]   [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'provider': Generic bean: class [com.self.study.impl.services.Provider]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [C:\works\Runner_VIV\VIV-BAAS\all\dubbo-test\target\classes\com\self\study\impl\services\Provider.class]] } were scanned under package[com.self.study.impl.services], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:46  [main:501] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:46  [main:510] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, try to find an extension (bean) of type java.lang.String, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:46  [main:511] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, type:java.lang.String found, stop get bean., dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:46  [main:671] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0, boolean arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:47  [main:784] - [INFO]   [DUBBO] The service ready on spring started. service: com.self.study.api.DemoService, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:47  [main:891] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.rpc.Invocation arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
if (arg1 == null) throw new IllegalArgumentException("invocation == null");
String methodName = arg1.getMethodName();
String extName = url.getMethodParameter(methodName, "cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:47  [main:914] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:47  [main:934] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:47  [main:953] - [INFO]   [DUBBO] Export dubbo service com.self.study.api.DemoService to local registry, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:47  [main:954] - [INFO]   [DUBBO] Export dubbo service com.self.study.api.DemoService to url dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&bind.ip=192.168.48.1&bind.port=20880&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=10176&side=provider&timestamp=1562023487056, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:47  [main:955] - [INFO]   [DUBBO] Register dubbo service com.self.study.api.DemoService url dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&bind.ip=192.168.48.1&bind.port=20880&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=10176&side=provider&timestamp=1562023487056 to registry registry://127.0.0.1:2183/com.alibaba.dubbo.registry.RegistryService?application=annotation-provider&dubbo=2.0.2&pid=10176&registry=zookeeper&timestamp=1562023487043, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:47  [main:966] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:47  [main:984] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:48  [main:2023] - [INFO]   [DUBBO] qos-server bind localhost:22222, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:48  [main:2046] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:48  [main:2076] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:48  [main:2101] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:48  [main:2172] - [INFO]   [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /192.168.48.1:20880, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:48  [main:2183] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:48  [main:2211] - [INFO]   [DUBBO] Load registry store file C:\Users\14467\.dubbo\dubbo-registry-annotation-provider-127.0.0.1:2183.cache, data: {com.self.study.api.DemoService=empty://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=1192&side=provider&timestamp=1562023317770}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:57  [main:11526] - [INFO]   [DUBBO] Register: dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=10176&side=provider&timestamp=1562023487056, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:58  [main:12019] - [INFO]   [DUBBO] Subscribe: provider://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=10176&side=provider&timestamp=1562023487056, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:58  [main:12039] - [INFO]   [DUBBO] Notify urls for subscribe url provider://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=10176&side=provider&timestamp=1562023487056, urls: [empty://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=10176&side=provider&timestamp=1562023487056], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:58  [main:12041] - [DEBUG]   [DUBBO] original override urls: [empty://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=10176&side=provider&timestamp=1562023487056], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:58  [main:12041] - [DEBUG]   [DUBBO] subscribe url: provider://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=10176&side=provider&timestamp=1562023487056, override urls: [empty://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=10176&side=provider&timestamp=1562023487056], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:58  [main:12052] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:58  [main:12067] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:59  [main:0] - [INFO]  using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2019-07-02 07:24:59  [main:35] - [INFO]   [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:59  [main:35] - [INFO]   [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:59  [main:40] - [WARN]   [DUBBO] No Spring Bean annotating Dubbo's @Service was found under package[com.self.study.impl.consumer], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:59  [main:416] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:59  [main:428] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, try to find an extension (bean) of type java.lang.String, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:59  [main:429] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, type:java.lang.String found, stop get bean., dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:59  [main:734] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:24:59  [main:769] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0, boolean arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:00  [main:1024] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:01  [main:2756] - [ERROR]   [DUBBO] qos-server can not bind localhost:22222, dubbo version: 2.6.6, current host: 192.168.48.1
java.net.BindException: Address already in use: bind
	at sun.nio.ch.Net.bind0(Native Method)
	at sun.nio.ch.Net.bind(Net.java:433)
	at sun.nio.ch.Net.bind(Net.java:425)
	at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:223)
	at io.netty.channel.socket.nio.NioServerSocketChannel.doBind(NioServerSocketChannel.java:130)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.bind(AbstractChannel.java:562)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.bind(DefaultChannelPipeline.java:1358)
	at io.netty.channel.AbstractChannelHandlerContext.invokeBind(AbstractChannelHandlerContext.java:501)
	at io.netty.channel.AbstractChannelHandlerContext.bind(AbstractChannelHandlerContext.java:486)
	at io.netty.channel.DefaultChannelPipeline.bind(DefaultChannelPipeline.java:1019)
	at io.netty.channel.AbstractChannel.bind(AbstractChannel.java:258)
	at io.netty.bootstrap.AbstractBootstrap$2.run(AbstractBootstrap.java:366)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:474)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:909)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2019-07-02 07:25:01  [main:2761] - [WARN]   [DUBBO] Fail to start qos server: , dubbo version: 2.6.6, current host: 192.168.48.1
java.net.BindException: Address already in use: bind
	at sun.nio.ch.Net.bind0(Native Method)
	at sun.nio.ch.Net.bind(Net.java:433)
	at sun.nio.ch.Net.bind(Net.java:425)
	at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:223)
	at io.netty.channel.socket.nio.NioServerSocketChannel.doBind(NioServerSocketChannel.java:130)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.bind(AbstractChannel.java:562)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.bind(DefaultChannelPipeline.java:1358)
	at io.netty.channel.AbstractChannelHandlerContext.invokeBind(AbstractChannelHandlerContext.java:501)
	at io.netty.channel.AbstractChannelHandlerContext.bind(AbstractChannelHandlerContext.java:486)
	at io.netty.channel.DefaultChannelPipeline.bind(DefaultChannelPipeline.java:1019)
	at io.netty.channel.AbstractChannel.bind(AbstractChannel.java:258)
	at io.netty.bootstrap.AbstractBootstrap$2.run(AbstractBootstrap.java:366)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:474)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:909)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2019-07-02 07:25:01  [main:2765] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:01  [main:2785] - [INFO]   [DUBBO] Load registry store file C:\Users\14467\.dubbo\dubbo-registry-annotation-consumer-127.0.0.1:2183.cache, data: {com.self.study.api.DemoService=empty://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=configurators&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=1796&side=consumer&timestamp=1562023374961 empty://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=1796&side=consumer&timestamp=1562023374961 dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=1192&side=provider&timestamp=1562023317770}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [main:12017] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [main:12037] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [main:12051] - [INFO]   [DUBBO] Register: consumer://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=consumers&check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=12344&side=consumer&timestamp=1562023499966, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [main:12133] - [INFO]   [DUBBO] Subscribe: consumer://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=12344&side=consumer&timestamp=1562023499966, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [main:12156] - [INFO]   [DUBBO] Notify urls for subscribe url consumer://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=12344&side=consumer&timestamp=1562023499966, urls: [dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=10176&side=provider&timestamp=1562023487056, dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=1192&side=provider&timestamp=1562023317770, empty://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=configurators&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=12344&side=consumer&timestamp=1562023499966, empty://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=12344&side=consumer&timestamp=1562023499966], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [main:12185] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [main:12217] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [main:12236] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [main:12311] - [INFO]   [DUBBO] Successed connect to server /192.168.48.1:20880 from NettyClient 192.168.48.1 using dubbo version 2.6.6, channel is NettyChannel [channel=[id: 0x8b7a47f8, L:/192.168.48.1:50966 - R:/192.168.48.1:20880]], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [main:12312] - [INFO]   [DUBBO] Start NettyClient DESKTOP-T5RQKO2/192.168.48.1 connect to the server /192.168.48.1:20880, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [main:12393] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.rpc.Invocation arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
if (arg1 == null) throw new IllegalArgumentException("invocation == null");
String methodName = arg1.getMethodName();
String extName = url.getMethodParameter(methodName, "cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [main:12408] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [main:12421] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [main:12439] - [INFO]   [DUBBO] Refer dubbo service com.self.study.api.DemoService from url zookeeper://127.0.0.1:2183/com.alibaba.dubbo.registry.RegistryService?anyhost=true&application=annotation-consumer&bean.name=providers:dubbo:com.self.study.api.DemoService&check=false&default.timeout=3000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=12344&register.ip=192.168.48.1&remote.timestamp=1562023487056&side=consumer&timestamp=1562023499966, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [DubboServerHandler-192.168.48.1:20880-thread-2:25449] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [DubboServerHandler-192.168.48.1:20880-thread-2:25458] - [ERROR]   [DUBBO] Got unchecked and undeclared exception which called by 192.168.48.1. service: com.self.study.api.DemoService, method: sayHello, exception: java.lang.NoClassDefFoundError: javax/validation/ConstraintViolationException, dubbo version: 2.6.6, current host: 192.168.48.1
java.lang.NoClassDefFoundError: javax/validation/ConstraintViolationException
	at com.alibaba.dubbo.validation.support.jvalidation.JValidation.createValidator(JValidation.java:30)
	at com.alibaba.dubbo.validation.support.AbstractValidation.getValidator(AbstractValidation.java:38)
	at com.alibaba.dubbo.validation.Validation$Adaptive.getValidator(Validation$Adaptive.java)
	at com.alibaba.dubbo.validation.filter.ValidationFilter.invoke(ValidationFilter.java:48)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72)
	at com.alibaba.dubbo.rpc.filter.ExceptionFilter.invoke(ExceptionFilter.java:62)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:75)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72)
	at com.alibaba.dubbo.rpc.filter.TimeoutFilter.invoke(TimeoutFilter.java:42)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.TraceFilter.invoke(TraceFilter.java:78)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72)
	at com.alibaba.dubbo.rpc.filter.ContextFilter.invoke(ContextFilter.java:73)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72)
	at com.alibaba.dubbo.rpc.filter.GenericFilter.invoke(GenericFilter.java:138)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72)
	at com.alibaba.dubbo.rpc.filter.ClassLoaderFilter.invoke(ClassLoaderFilter.java:38)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72)
	at com.alibaba.dubbo.rpc.filter.EchoFilter.invoke(EchoFilter.java:38)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol$1.reply(DubboProtocol.java:104)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeHandler.handleRequest(HeaderExchangeHandler.java:96)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeHandler.received(HeaderExchangeHandler.java:173)
	at com.alibaba.dubbo.remoting.transport.DecodeHandler.received(DecodeHandler.java:51)
	at com.alibaba.dubbo.remoting.transport.dispatcher.ChannelEventRunnable.run(ChannelEventRunnable.java:57)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.ClassNotFoundException: javax.validation.ConstraintViolationException
	at java.net.URLClassLoader.findClass(URLClassLoader.java:382)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	... 29 more
2019-07-02 07:25:11  [DubboClientHandler-192.168.48.1:20880-thread-1:12736] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [DubboShutdownHook:12741] - [INFO]   [DUBBO] Run shutdown hook now., dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [DubboShutdownHook:12742] - [INFO]   [DUBBO] Close all registries [zookeeper://127.0.0.1:2183/com.alibaba.dubbo.registry.RegistryService?application=annotation-consumer&dubbo=2.0.2&interface=com.alibaba.dubbo.registry.RegistryService&pid=12344&timestamp=1562023500035], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [DubboShutdownHook:12743] - [INFO]   [DUBBO] Destroy registry:zookeeper://127.0.0.1:2183/com.alibaba.dubbo.registry.RegistryService?application=annotation-consumer&dubbo=2.0.2&interface=com.alibaba.dubbo.registry.RegistryService&pid=12344&timestamp=1562023500035, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [DubboShutdownHook:12743] - [INFO]   [DUBBO] Unregister: consumer://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=consumers&check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=12344&side=consumer&timestamp=1562023499966, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [DubboShutdownHook:12752] - [INFO]   [DUBBO] Destroy unregister url consumer://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=consumers&check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=12344&side=consumer&timestamp=1562023499966, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [DubboShutdownHook:12753] - [INFO]   [DUBBO] Unsubscribe: consumer://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=12344&side=consumer&timestamp=1562023499966, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [DubboShutdownHook:12754] - [INFO]   [DUBBO] Destroy unsubscribe url consumer://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=12344&side=consumer&timestamp=1562023499966, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [DubboShutdownHook:12859] - [INFO]   [DUBBO] Close dubbo connect: /192.168.48.1:50966-->/192.168.48.1:20880, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [DubboShutdownHook:12859] - [INFO]   [DUBBO] Destroy reference: dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-consumer&bean.name=providers:dubbo:com.self.study.api.DemoService&check=false&default.timeout=3000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=12344&register.ip=192.168.48.1&remote.timestamp=1562023317770&side=consumer&timestamp=1562023499966, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [DubboShutdownHook:12861] - [INFO]   [DUBBO] Close netty channel [id: 0x8b7a47f8, L:/192.168.48.1:50966 - R:/192.168.48.1:20880], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [DubboShutdownHook:12863] - [INFO]   [DUBBO] Destroy reference: dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-consumer&bean.name=providers:dubbo:com.self.study.api.DemoService&check=false&default.timeout=3000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=12344&register.ip=192.168.48.1&remote.timestamp=1562023487056&side=consumer&timestamp=1562023499966, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [DubboShutdownHook:12864] - [INFO]   [DUBBO] qos-server stopped., dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [NettyServerWorker-5-1:25653] - [WARN]   [DUBBO] All clients has discontected from /192.168.48.1:20880. You can graceful shutdown now., dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:25:11  [DubboServerHandler-192.168.48.1:20880-thread-3:25655] - [INFO]   [DUBBO] disconnected from /192.168.48.1:50966,url:dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&bind.ip=192.168.48.1&bind.port=20880&channel.readonly.sent=true&codec=dubbo&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&heartbeat=60000&interface=com.self.study.api.DemoService&methods=sayHello&pid=10176&side=provider&timestamp=1562023487056, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:45  [main:0] - [INFO]  using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2019-07-02 07:30:45  [main:15] - [INFO]   [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:45  [main:15] - [INFO]   [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:45  [main:89] - [INFO]   [DUBBO] The BeanDefinition[Root bean: class [com.alibaba.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean has been registered with name : providers:dubbo:com.self.study.api.DemoService, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:45  [main:90] - [INFO]   [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'provider': Generic bean: class [com.self.study.impl.services.Provider]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [C:\works\Runner_VIV\VIV-BAAS\all\dubbo-test\target\classes\com\self\study\impl\services\Provider.class]] } were scanned under package[com.self.study.impl.services], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:45  [main:609] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:45  [main:618] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, try to find an extension (bean) of type java.lang.String, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:45  [main:619] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, type:java.lang.String found, stop get bean., dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:45  [main:862] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0, boolean arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:46  [main:982] - [INFO]   [DUBBO] The service ready on spring started. service: com.self.study.api.DemoService, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:46  [main:1107] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.rpc.Invocation arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
if (arg1 == null) throw new IllegalArgumentException("invocation == null");
String methodName = arg1.getMethodName();
String extName = url.getMethodParameter(methodName, "cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:46  [main:1141] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:46  [main:1163] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:46  [main:1184] - [INFO]   [DUBBO] Export dubbo service com.self.study.api.DemoService to local registry, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:46  [main:1184] - [INFO]   [DUBBO] Export dubbo service com.self.study.api.DemoService to url dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&bind.ip=192.168.48.1&bind.port=20880&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=7200&side=provider&timestamp=1562023846061, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:46  [main:1185] - [INFO]   [DUBBO] Register dubbo service com.self.study.api.DemoService url dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&bind.ip=192.168.48.1&bind.port=20880&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=7200&side=provider&timestamp=1562023846061 to registry registry://127.0.0.1:2183/com.alibaba.dubbo.registry.RegistryService?application=annotation-provider&dubbo=2.0.2&pid=7200&registry=zookeeper&timestamp=1562023846047, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:46  [main:1197] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:46  [main:1213] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:47  [main:2179] - [INFO]   [DUBBO] qos-server bind localhost:22222, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:47  [main:2196] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:47  [main:2220] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:47  [main:2239] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:47  [main:2283] - [INFO]   [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /192.168.48.1:20880, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:47  [main:2289] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:47  [main:2312] - [INFO]   [DUBBO] Load registry store file C:\Users\14467\.dubbo\dubbo-registry-annotation-provider-127.0.0.1:2183.cache, data: {com.self.study.api.DemoService=empty://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=10176&side=provider&timestamp=1562023487056}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:56  [main:11525] - [INFO]   [DUBBO] Register: dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=7200&side=provider&timestamp=1562023846061, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:57  [main:12025] - [INFO]   [DUBBO] Subscribe: provider://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=7200&side=provider&timestamp=1562023846061, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:57  [main:12039] - [INFO]   [DUBBO] Notify urls for subscribe url provider://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=7200&side=provider&timestamp=1562023846061, urls: [empty://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=7200&side=provider&timestamp=1562023846061], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:57  [main:12042] - [DEBUG]   [DUBBO] original override urls: [empty://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=7200&side=provider&timestamp=1562023846061], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:57  [main:12043] - [DEBUG]   [DUBBO] subscribe url: provider://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=7200&side=provider&timestamp=1562023846061, override urls: [empty://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=7200&side=provider&timestamp=1562023846061], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:57  [main:12053] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:30:57  [main:12065] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:07  [main:1] - [INFO]  using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2019-07-02 07:31:07  [main:35] - [INFO]   [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:07  [main:36] - [INFO]   [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:07  [main:42] - [WARN]   [DUBBO] No Spring Bean annotating Dubbo's @Service was found under package[com.self.study.impl.consumer], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:07  [main:502] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:07  [main:518] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, try to find an extension (bean) of type java.lang.String, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:07  [main:519] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, type:java.lang.String found, stop get bean., dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:08  [main:845] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:08  [main:892] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0, boolean arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:08  [main:1138] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:10  [main:3021] - [ERROR]   [DUBBO] qos-server can not bind localhost:22222, dubbo version: 2.6.6, current host: 192.168.48.1
java.net.BindException: Address already in use: bind
	at sun.nio.ch.Net.bind0(Native Method)
	at sun.nio.ch.Net.bind(Net.java:433)
	at sun.nio.ch.Net.bind(Net.java:425)
	at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:223)
	at io.netty.channel.socket.nio.NioServerSocketChannel.doBind(NioServerSocketChannel.java:130)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.bind(AbstractChannel.java:562)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.bind(DefaultChannelPipeline.java:1358)
	at io.netty.channel.AbstractChannelHandlerContext.invokeBind(AbstractChannelHandlerContext.java:501)
	at io.netty.channel.AbstractChannelHandlerContext.bind(AbstractChannelHandlerContext.java:486)
	at io.netty.channel.DefaultChannelPipeline.bind(DefaultChannelPipeline.java:1019)
	at io.netty.channel.AbstractChannel.bind(AbstractChannel.java:258)
	at io.netty.bootstrap.AbstractBootstrap$2.run(AbstractBootstrap.java:366)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:474)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:909)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2019-07-02 07:31:10  [main:3025] - [WARN]   [DUBBO] Fail to start qos server: , dubbo version: 2.6.6, current host: 192.168.48.1
java.net.BindException: Address already in use: bind
	at sun.nio.ch.Net.bind0(Native Method)
	at sun.nio.ch.Net.bind(Net.java:433)
	at sun.nio.ch.Net.bind(Net.java:425)
	at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:223)
	at io.netty.channel.socket.nio.NioServerSocketChannel.doBind(NioServerSocketChannel.java:130)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.bind(AbstractChannel.java:562)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.bind(DefaultChannelPipeline.java:1358)
	at io.netty.channel.AbstractChannelHandlerContext.invokeBind(AbstractChannelHandlerContext.java:501)
	at io.netty.channel.AbstractChannelHandlerContext.bind(AbstractChannelHandlerContext.java:486)
	at io.netty.channel.DefaultChannelPipeline.bind(DefaultChannelPipeline.java:1019)
	at io.netty.channel.AbstractChannel.bind(AbstractChannel.java:258)
	at io.netty.bootstrap.AbstractBootstrap$2.run(AbstractBootstrap.java:366)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:474)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:909)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2019-07-02 07:31:10  [main:3031] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:10  [main:3054] - [INFO]   [DUBBO] Load registry store file C:\Users\14467\.dubbo\dubbo-registry-annotation-consumer-127.0.0.1:2183.cache, data: {com.self.study.api.DemoService=empty://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=configurators&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=12344&side=consumer&timestamp=1562023499966 empty://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=12344&side=consumer&timestamp=1562023499966 dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=10176&side=provider&timestamp=1562023487056 dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=1192&side=provider&timestamp=1562023317770}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:19  [main:12267] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:19  [main:12284] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:19  [main:12303] - [INFO]   [DUBBO] Register: consumer://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=consumers&check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=4112&side=consumer&timestamp=1562023868344, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:20  [main:12733] - [INFO]   [DUBBO] Subscribe: consumer://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=4112&side=consumer&timestamp=1562023868344, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:20  [main:12767] - [INFO]   [DUBBO] Notify urls for subscribe url consumer://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=4112&side=consumer&timestamp=1562023868344, urls: [dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=7200&side=provider&timestamp=1562023846061, empty://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=configurators&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=4112&side=consumer&timestamp=1562023868344, empty://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=4112&side=consumer&timestamp=1562023868344], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:20  [main:12801] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:20  [main:12836] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:20  [main:12858] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:20  [main:12923] - [INFO]   [DUBBO] Successed connect to server /192.168.48.1:20880 from NettyClient 192.168.48.1 using dubbo version 2.6.6, channel is NettyChannel [channel=[id: 0xb0f57962, L:/192.168.48.1:51531 - R:/192.168.48.1:20880]], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:20  [main:12923] - [INFO]   [DUBBO] Start NettyClient DESKTOP-T5RQKO2/192.168.48.1 connect to the server /192.168.48.1:20880, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:20  [main:13004] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.rpc.Invocation arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
if (arg1 == null) throw new IllegalArgumentException("invocation == null");
String methodName = arg1.getMethodName();
String extName = url.getMethodParameter(methodName, "cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:20  [main:13016] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:20  [main:13028] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:20  [main:13047] - [INFO]   [DUBBO] Refer dubbo service com.self.study.api.DemoService from url zookeeper://127.0.0.1:2183/com.alibaba.dubbo.registry.RegistryService?anyhost=true&application=annotation-consumer&bean.name=providers:dubbo:com.self.study.api.DemoService&check=false&default.timeout=3000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=4112&register.ip=192.168.48.1&remote.timestamp=1562023846061&side=consumer&timestamp=1562023868344, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:20  [DubboServerHandler-192.168.48.1:20880-thread-2:35753] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:20  [DubboClientHandler-192.168.48.1:20880-thread-1:13715] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:21  [DubboServerHandler-192.168.48.1:20880-thread-3:35946] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:21  [DubboClientHandler-192.168.48.1:20880-thread-1:13725] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:21  [DubboServerHandler-192.168.48.1:20880-thread-4:35953] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:21  [DubboClientHandler-192.168.48.1:20880-thread-1:13731] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:21  [DubboServerHandler-192.168.48.1:20880-thread-5:35958] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:21  [DubboClientHandler-192.168.48.1:20880-thread-1:13736] - [DEBUG]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:21  [DubboShutdownHook:13738] - [INFO]   [DUBBO] Run shutdown hook now., dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:21  [DubboShutdownHook:13739] - [INFO]   [DUBBO] Close all registries [zookeeper://127.0.0.1:2183/com.alibaba.dubbo.registry.RegistryService?application=annotation-consumer&dubbo=2.0.2&interface=com.alibaba.dubbo.registry.RegistryService&pid=4112&timestamp=1562023868401], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:21  [DubboShutdownHook:13739] - [INFO]   [DUBBO] Destroy registry:zookeeper://127.0.0.1:2183/com.alibaba.dubbo.registry.RegistryService?application=annotation-consumer&dubbo=2.0.2&interface=com.alibaba.dubbo.registry.RegistryService&pid=4112&timestamp=1562023868401, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:21  [DubboShutdownHook:13741] - [INFO]   [DUBBO] Unregister: consumer://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=consumers&check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=4112&side=consumer&timestamp=1562023868344, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:21  [DubboShutdownHook:13749] - [INFO]   [DUBBO] Destroy unregister url consumer://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=consumers&check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=4112&side=consumer&timestamp=1562023868344, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:21  [DubboShutdownHook:13750] - [INFO]   [DUBBO] Unsubscribe: consumer://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=4112&side=consumer&timestamp=1562023868344, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:21  [DubboShutdownHook:13750] - [INFO]   [DUBBO] Destroy unsubscribe url consumer://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=4112&side=consumer&timestamp=1562023868344, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:21  [DubboShutdownHook:13762] - [INFO]   [DUBBO] Close dubbo connect: /192.168.48.1:51531-->/192.168.48.1:20880, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:21  [DubboShutdownHook:13764] - [INFO]   [DUBBO] Close netty channel [id: 0xb0f57962, L:/192.168.48.1:51531 - R:/192.168.48.1:20880], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:21  [DubboShutdownHook:13767] - [INFO]   [DUBBO] Close dubbo connect: 192.168.48.1:0-->192.168.48.1:20880, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:21  [DubboShutdownHook:13768] - [INFO]   [DUBBO] Destroy reference: dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-consumer&bean.name=providers:dubbo:com.self.study.api.DemoService&check=false&default.timeout=3000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=4112&register.ip=192.168.48.1&remote.timestamp=1562023846061&side=consumer&timestamp=1562023868344, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:21  [DubboShutdownHook:13768] - [INFO]   [DUBBO] qos-server stopped., dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:21  [NettyServerWorker-5-1:36009] - [WARN]   [DUBBO] All clients has discontected from /192.168.48.1:20880. You can graceful shutdown now., dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:31:21  [DubboServerHandler-192.168.48.1:20880-thread-6:36010] - [INFO]   [DUBBO] disconnected from /192.168.48.1:51531,url:dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&bind.ip=192.168.48.1&bind.port=20880&channel.readonly.sent=true&codec=dubbo&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&heartbeat=60000&interface=com.self.study.api.DemoService&methods=sayHello&pid=7200&side=provider&timestamp=1562023846061, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:34:51  [main:0] - [INFO]  using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2019-07-02 07:34:51  [main:17] - [INFO]   [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:34:51  [main:17] - [INFO]   [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:34:51  [main:89] - [INFO]   [DUBBO] The BeanDefinition[Root bean: class [com.alibaba.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean has been registered with name : providers:dubbo:com.self.study.api.DemoService, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:34:51  [main:91] - [INFO]   [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'provider': Generic bean: class [com.self.study.impl.services.Provider]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [C:\works\Runner_VIV\VIV-BAAS\all\dubbo-test\target\classes\com\self\study\impl\services\Provider.class]] } were scanned under package[com.self.study.impl.services], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:34:51  [main:542] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:34:51  [main:551] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, try to find an extension (bean) of type java.lang.String, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:34:51  [main:552] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, type:java.lang.String found, stop get bean., dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:34:51  [main:703] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0, boolean arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:34:52  [main:820] - [INFO]   [DUBBO] The service ready on spring started. service: com.self.study.api.DemoService, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:34:52  [main:940] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.rpc.Invocation arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
if (arg1 == null) throw new IllegalArgumentException("invocation == null");
String methodName = arg1.getMethodName();
String extName = url.getMethodParameter(methodName, "cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:34:52  [main:968] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:34:52  [main:993] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:34:52  [main:1016] - [INFO]   [DUBBO] Export dubbo service com.self.study.api.DemoService to local registry, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:34:52  [main:1017] - [INFO]   [DUBBO] Export dubbo service com.self.study.api.DemoService to url dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&bind.ip=192.168.48.1&bind.port=20880&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=3952&side=provider&timestamp=1562024092048, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:34:52  [main:1017] - [INFO]   [DUBBO] Register dubbo service com.self.study.api.DemoService url dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&bind.ip=192.168.48.1&bind.port=20880&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=3952&side=provider&timestamp=1562024092048 to registry registry://127.0.0.1:2183/com.alibaba.dubbo.registry.RegistryService?application=annotation-provider&dubbo=2.0.2&pid=3952&registry=zookeeper&timestamp=1562024092033, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:34:52  [main:1030] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:34:52  [main:1047] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:34:53  [main:1912] - [INFO]   [DUBBO] qos-server bind localhost:22222, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:34:53  [main:1933] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:34:53  [main:1958] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:34:53  [main:1974] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:34:53  [main:2017] - [INFO]   [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /192.168.48.1:20880, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:34:53  [main:2023] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:34:53  [main:2040] - [INFO]   [DUBBO] Load registry store file C:\Users\14467\.dubbo\dubbo-registry-annotation-provider-127.0.0.1:2183.cache, data: {com.self.study.api.DemoService=empty://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=7200&side=provider&timestamp=1562023846061}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:02  [main:11238] - [INFO]   [DUBBO] Register: dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=3952&side=provider&timestamp=1562024092048, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:05  [main:0] - [INFO]  using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2019-07-02 07:35:05  [main:34] - [INFO]   [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:05  [main:35] - [INFO]   [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:05  [main:40] - [WARN]   [DUBBO] No Spring Bean annotating Dubbo's @Service was found under package[com.self.study.impl.consumer], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:05  [main:403] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:05  [main:413] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, try to find an extension (bean) of type java.lang.String, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:05  [main:414] - [WARN]   [DUBBO] No spring extension (bean) named:defaultCompiler, type:java.lang.String found, stop get bean., dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:06  [main:14915] - [INFO]   [DUBBO] Subscribe: provider://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=3952&side=provider&timestamp=1562024092048, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:06  [main:14937] - [INFO]   [DUBBO] Notify urls for subscribe url provider://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=3952&side=provider&timestamp=1562024092048, urls: [empty://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=3952&side=provider&timestamp=1562024092048], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:06  [main:14940] - [DEBUG]   [DUBBO] original override urls: [empty://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=3952&side=provider&timestamp=1562024092048], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:06  [main:14941] - [DEBUG]   [DUBBO] subscribe url: provider://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=3952&side=provider&timestamp=1562024092048, override urls: [empty://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&category=configurators&check=false&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=3952&side=provider&timestamp=1562024092048], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:06  [main:791] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:06  [main:14964] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:06  [main:14987] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:06  [main:839] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0, boolean arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:06  [main:1109] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:08  [main:2976] - [ERROR]   [DUBBO] qos-server can not bind localhost:22222, dubbo version: 2.6.6, current host: 192.168.48.1
java.net.BindException: Address already in use: bind
	at sun.nio.ch.Net.bind0(Native Method)
	at sun.nio.ch.Net.bind(Net.java:433)
	at sun.nio.ch.Net.bind(Net.java:425)
	at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:223)
	at io.netty.channel.socket.nio.NioServerSocketChannel.doBind(NioServerSocketChannel.java:130)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.bind(AbstractChannel.java:562)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.bind(DefaultChannelPipeline.java:1358)
	at io.netty.channel.AbstractChannelHandlerContext.invokeBind(AbstractChannelHandlerContext.java:501)
	at io.netty.channel.AbstractChannelHandlerContext.bind(AbstractChannelHandlerContext.java:486)
	at io.netty.channel.DefaultChannelPipeline.bind(DefaultChannelPipeline.java:1019)
	at io.netty.channel.AbstractChannel.bind(AbstractChannel.java:258)
	at io.netty.bootstrap.AbstractBootstrap$2.run(AbstractBootstrap.java:366)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:474)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:909)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2019-07-02 07:35:08  [main:2980] - [WARN]   [DUBBO] Fail to start qos server: , dubbo version: 2.6.6, current host: 192.168.48.1
java.net.BindException: Address already in use: bind
	at sun.nio.ch.Net.bind0(Native Method)
	at sun.nio.ch.Net.bind(Net.java:433)
	at sun.nio.ch.Net.bind(Net.java:425)
	at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:223)
	at io.netty.channel.socket.nio.NioServerSocketChannel.doBind(NioServerSocketChannel.java:130)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.bind(AbstractChannel.java:562)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.bind(DefaultChannelPipeline.java:1358)
	at io.netty.channel.AbstractChannelHandlerContext.invokeBind(AbstractChannelHandlerContext.java:501)
	at io.netty.channel.AbstractChannelHandlerContext.bind(AbstractChannelHandlerContext.java:486)
	at io.netty.channel.DefaultChannelPipeline.bind(DefaultChannelPipeline.java:1019)
	at io.netty.channel.AbstractChannel.bind(AbstractChannel.java:258)
	at io.netty.bootstrap.AbstractBootstrap$2.run(AbstractBootstrap.java:366)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:474)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:909)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2019-07-02 07:35:08  [main:2987] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:08  [main:3008] - [INFO]   [DUBBO] Load registry store file C:\Users\14467\.dubbo\dubbo-registry-annotation-consumer-127.0.0.1:2183.cache, data: {com.self.study.api.DemoService=empty://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=configurators&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=4112&side=consumer&timestamp=1562023868344 empty://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=4112&side=consumer&timestamp=1562023868344 dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=7200&side=provider&timestamp=1562023846061}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:17  [main:12253] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:17  [main:12274] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:17  [main:12292] - [INFO]   [DUBBO] Register: consumer://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=consumers&check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=10856&side=consumer&timestamp=1562024106389, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:17  [main:12394] - [INFO]   [DUBBO] Subscribe: consumer://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=10856&side=consumer&timestamp=1562024106389, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:17  [main:12417] - [INFO]   [DUBBO] Notify urls for subscribe url consumer://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=10856&side=consumer&timestamp=1562024106389, urls: [dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=3952&side=provider&timestamp=1562024092048, empty://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=configurators&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=10856&side=consumer&timestamp=1562024106389, empty://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=10856&side=consumer&timestamp=1562024106389], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:17  [main:12447] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:17  [main:12478] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:17  [main:12497] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:17  [main:12565] - [INFO]   [DUBBO] Successed connect to server /192.168.48.1:20880 from NettyClient 192.168.48.1 using dubbo version 2.6.6, channel is NettyChannel [channel=[id: 0x9d6c4801, L:/192.168.48.1:51853 - R:/192.168.48.1:20880]], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:17  [main:12566] - [INFO]   [DUBBO] Start NettyClient DESKTOP-T5RQKO2/192.168.48.1 connect to the server /192.168.48.1:20880, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:18  [main:12659] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.rpc.Invocation arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
if (arg1 == null) throw new IllegalArgumentException("invocation == null");
String methodName = arg1.getMethodName();
String extName = url.getMethodParameter(methodName, "cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0, arg1);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:18  [main:12673] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:18  [main:12688] - [DEBUG]   [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:18  [main:12705] - [INFO]   [DUBBO] Refer dubbo service com.self.study.api.DemoService from url zookeeper://127.0.0.1:2183/com.alibaba.dubbo.registry.RegistryService?anyhost=true&application=annotation-consumer&bean.name=providers:dubbo:com.self.study.api.DemoService&check=false&default.timeout=3000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=10856&register.ip=192.168.48.1&remote.timestamp=1562024092048&side=consumer&timestamp=1562024106389, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:18  [main:12979] - [ERROR]   [DUBBO] Failed to validate service: com.self.study.api.DemoService, method: sayHello, cause: [ConstraintViolationImpl{interpolatedMessage='不能为null', propertyPath=sayHelloArgument0, rootBeanClass=class com.self.study.api.DemoService_SayHelloParameter_java.lang.String, messageTemplate='{javax.validation.constraints.NotNull.message}'}], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:18  [DubboShutdownHook:12982] - [INFO]   [DUBBO] Run shutdown hook now., dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:18  [DubboShutdownHook:12983] - [INFO]   [DUBBO] Close all registries [zookeeper://127.0.0.1:2183/com.alibaba.dubbo.registry.RegistryService?application=annotation-consumer&dubbo=2.0.2&interface=com.alibaba.dubbo.registry.RegistryService&pid=10856&timestamp=1562024106464], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:18  [DubboShutdownHook:12984] - [INFO]   [DUBBO] Destroy registry:zookeeper://127.0.0.1:2183/com.alibaba.dubbo.registry.RegistryService?application=annotation-consumer&dubbo=2.0.2&interface=com.alibaba.dubbo.registry.RegistryService&pid=10856&timestamp=1562024106464, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:18  [DubboShutdownHook:12985] - [INFO]   [DUBBO] Unregister: consumer://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=consumers&check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=10856&side=consumer&timestamp=1562024106389, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:18  [DubboShutdownHook:12993] - [INFO]   [DUBBO] Destroy unregister url consumer://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=consumers&check=false&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=10856&side=consumer&timestamp=1562024106389, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:18  [DubboShutdownHook:12994] - [INFO]   [DUBBO] Unsubscribe: consumer://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=10856&side=consumer&timestamp=1562024106389, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:18  [DubboShutdownHook:12994] - [INFO]   [DUBBO] Destroy unsubscribe url consumer://192.168.48.1/com.self.study.api.DemoService?application=annotation-consumer&category=providers,configurators,routers&default.timeout=3000&dubbo=2.0.2&interface=com.self.study.api.DemoService&methods=sayHello&pid=10856&side=consumer&timestamp=1562024106389, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:18  [DubboShutdownHook:13109] - [INFO]   [DUBBO] Close dubbo connect: /192.168.48.1:51853-->/192.168.48.1:20880, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:18  [DubboShutdownHook:13116] - [INFO]   [DUBBO] Close netty channel [id: 0x9d6c4801, L:/192.168.48.1:51853 - R:/192.168.48.1:20880], dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:18  [DubboShutdownHook:13120] - [INFO]   [DUBBO] Close dubbo connect: 192.168.48.1:0-->192.168.48.1:20880, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:18  [DubboShutdownHook:13121] - [INFO]   [DUBBO] Destroy reference: dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-consumer&bean.name=providers:dubbo:com.self.study.api.DemoService&check=false&default.timeout=3000&default.validation=jvalidation&dubbo=2.0.2&generic=false&interface=com.self.study.api.DemoService&methods=sayHello&pid=10856&register.ip=192.168.48.1&remote.timestamp=1562024092048&side=consumer&timestamp=1562024106389, dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:18  [DubboShutdownHook:13122] - [INFO]   [DUBBO] qos-server stopped., dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:18  [NettyServerWorker-5-1:27334] - [WARN]   [DUBBO] All clients has discontected from 0.0.0.0/0.0.0.0:20880. You can graceful shutdown now., dubbo version: 2.6.6, current host: 192.168.48.1
2019-07-02 07:35:18  [DubboServerHandler-192.168.48.1:20880-thread-2:27337] - [INFO]   [DUBBO] disconnected from /192.168.48.1:51853,url:dubbo://192.168.48.1:20880/com.self.study.api.DemoService?anyhost=true&application=annotation-provider&bean.name=providers:dubbo:com.self.study.api.DemoService&bind.ip=192.168.48.1&bind.port=20880&channel.readonly.sent=true&codec=dubbo&default.timeout=1000&default.validation=jvalidation&dubbo=2.0.2&generic=false&heartbeat=60000&interface=com.self.study.api.DemoService&methods=sayHello&pid=3952&side=provider&timestamp=1562024092048, dubbo version: 2.6.6, current host: 192.168.48.1
